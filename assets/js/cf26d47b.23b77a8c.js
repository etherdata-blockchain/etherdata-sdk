"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[605],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,s=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=c(n),p=l,k=h["".concat(o,".").concat(p)]||h[p]||u[p]||s;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function p(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=n.length,r=new Array(s);r[0]=h;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5029:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return d},default:function(){return h}});var a=n(7462),l=n(3366),s=(n(7294),n(3905)),r=["components"],i={sidebar_label:"json_rpc_methods",title:"etherdata_sdk.json_rpc.json_rpc_methods"},o=void 0,c={unversionedId:"python/api/etherdata_sdk/json_rpc/json_rpc_methods",id:"python/api/etherdata_sdk/json_rpc/json_rpc_methods",title:"etherdata_sdk.json_rpc.json_rpc_methods",description:"SyncingResponseSyncObject Objects",source:"@site/docs/python/api/etherdata_sdk/json_rpc/json_rpc_methods.md",sourceDirName:"python/api/etherdata_sdk/json_rpc",slug:"/python/api/etherdata_sdk/json_rpc/json_rpc_methods",permalink:"/docs/python/api/etherdata_sdk/json_rpc/json_rpc_methods",editUrl:"https://github.com/etherdata-blockchain/etherdata-sdk/tree/main/docs/docs/python/api/etherdata_sdk/json_rpc/json_rpc_methods.md",tags:[],version:"current",frontMatter:{sidebar_label:"json_rpc_methods",title:"etherdata_sdk.json_rpc.json_rpc_methods"},sidebar:"tutorialSidebar",previous:{title:"etd",permalink:"/docs/python/api/etherdata_sdk/json_rpc/etd"},next:{title:"miner",permalink:"/docs/python/api/etherdata_sdk/json_rpc/miner"}},d=[{value:"SyncingResponseSyncObject Objects",id:"syncingresponsesyncobject-objects",children:[{value:"startingBlock",id:"startingblock",children:[],level:4},{value:"currentBlock",id:"currentblock",children:[],level:4},{value:"highestBlock",id:"highestblock",children:[],level:4}],level:2},{value:"SyncingResponse Objects",id:"syncingresponse-objects",children:[{value:"syncObject",id:"syncobject",children:[],level:4},{value:"syncStatus",id:"syncstatus",children:[],level:4}],level:2},{value:"Obj Objects",id:"obj-objects",children:[{value:"from_field",id:"from_field",children:[],level:4},{value:"to",id:"to",children:[],level:4},{value:"gas",id:"gas",children:[],level:4},{value:"gasPrice",id:"gasprice",children:[],level:4},{value:"value",id:"value",children:[],level:4},{value:"data",id:"data",children:[],level:4},{value:"nonce",id:"nonce",children:[],level:4}],level:2},{value:"GetBlockByHashResponseObj Objects",id:"getblockbyhashresponseobj-objects",children:[{value:"number",id:"number",children:[],level:4},{value:"hash",id:"hash",children:[],level:4},{value:"parnetHash",id:"parnethash",children:[],level:4},{value:"nonce",id:"nonce-1",children:[],level:4},{value:"sha3Uncles",id:"sha3uncles",children:[],level:4},{value:"logsBloom",id:"logsbloom",children:[],level:4},{value:"transactionsRoot",id:"transactionsroot",children:[],level:4},{value:"miner",id:"miner",children:[],level:4},{value:"difficulty",id:"difficulty",children:[],level:4},{value:"totalDifficulty",id:"totaldifficulty",children:[],level:4},{value:"extradata",id:"extradata",children:[],level:4},{value:"size",id:"size",children:[],level:4},{value:"gasLimit",id:"gaslimit",children:[],level:4},{value:"gasUsed",id:"gasused",children:[],level:4},{value:"timestamp",id:"timestamp",children:[],level:4},{value:"transaction",id:"transaction",children:[],level:4},{value:"uncles",id:"uncles",children:[],level:4}],level:2},{value:"GetBlockByNumberResponseObj Objects",id:"getblockbynumberresponseobj-objects",children:[{value:"number",id:"number-1",children:[],level:4},{value:"hash",id:"hash-1",children:[],level:4},{value:"parnetHash",id:"parnethash-1",children:[],level:4},{value:"nonce",id:"nonce-2",children:[],level:4},{value:"sha3Uncles",id:"sha3uncles-1",children:[],level:4},{value:"logsBloom",id:"logsbloom-1",children:[],level:4},{value:"transactionsRoot",id:"transactionsroot-1",children:[],level:4},{value:"miner",id:"miner-1",children:[],level:4},{value:"difficulty",id:"difficulty-1",children:[],level:4},{value:"totalDifficulty",id:"totaldifficulty-1",children:[],level:4},{value:"extradata",id:"extradata-1",children:[],level:4},{value:"size",id:"size-1",children:[],level:4},{value:"gasLimit",id:"gaslimit-1",children:[],level:4},{value:"gasUsed",id:"gasused-1",children:[],level:4},{value:"timestamp",id:"timestamp-1",children:[],level:4},{value:"transaction",id:"transaction-1",children:[],level:4},{value:"uncles",id:"uncles-1",children:[],level:4}],level:2},{value:"GetTransactionByHashResponseObj Objects",id:"gettransactionbyhashresponseobj-objects",children:[{value:"blockHash",id:"blockhash",children:[],level:4},{value:"blockNumber",id:"blocknumber",children:[],level:4},{value:"from_field",id:"from_field-1",children:[],level:4},{value:"gas",id:"gas-1",children:[],level:4},{value:"gasPrice",id:"gasprice-1",children:[],level:4},{value:"hash",id:"hash-2",children:[],level:4},{value:"input",id:"input",children:[],level:4},{value:"nonce",id:"nonce-3",children:[],level:4},{value:"to",id:"to-1",children:[],level:4},{value:"transactionIndex",id:"transactionindex",children:[],level:4},{value:"value",id:"value-1",children:[],level:4},{value:"v",id:"v",children:[],level:4},{value:"r",id:"r",children:[],level:4},{value:"s",id:"s",children:[],level:4}],level:2},{value:"GetTransactionByHashAndIndexResponseObj Objects",id:"gettransactionbyhashandindexresponseobj-objects",children:[{value:"data",id:"data-1",children:[],level:4}],level:2},{value:"GetTransactionByBlockNumberAndIndexResponseObj Objects",id:"gettransactionbyblocknumberandindexresponseobj-objects",children:[{value:"data",id:"data-2",children:[],level:4}],level:2},{value:"GetTransactionReceiptResponseObj Objects",id:"gettransactionreceiptresponseobj-objects",children:[{value:"transactionHash",id:"transactionhash",children:[],level:4},{value:"transactionIndex",id:"transactionindex-1",children:[],level:4},{value:"blockHash",id:"blockhash-1",children:[],level:4},{value:"blockNumber",id:"blocknumber-1",children:[],level:4},{value:"from_field",id:"from_field-2",children:[],level:4},{value:"to",id:"to-2",children:[],level:4},{value:"cumulativeGasUsed",id:"cumulativegasused",children:[],level:4},{value:"gasUsed",id:"gasused-2",children:[],level:4},{value:"contractAddress",id:"contractaddress",children:[],level:4},{value:"logs",id:"logs",children:[],level:4},{value:"logsBloom",id:"logsbloom-2",children:[],level:4},{value:"root",id:"root",children:[],level:4},{value:"status",id:"status",children:[],level:4}],level:2},{value:"GetUncleByBlockHashAndIndexResponseObj Objects",id:"getunclebyblockhashandindexresponseobj-objects",children:[{value:"data",id:"data-3",children:[],level:4}],level:2},{value:"GetUncleByBlockNumberAndIndexResponseObj Objects",id:"getunclebyblocknumberandindexresponseobj-objects",children:[{value:"data",id:"data-4",children:[],level:4}],level:2},{value:"Array Objects",id:"array-objects",children:[{value:"removed",id:"removed",children:[],level:4},{value:"logIndex",id:"logindex",children:[],level:4},{value:"transactionIndex",id:"transactionindex-2",children:[],level:4},{value:"transactionHash",id:"transactionhash-1",children:[],level:4},{value:"blockHash",id:"blockhash-2",children:[],level:4},{value:"blockNumber",id:"blocknumber-2",children:[],level:4},{value:"address",id:"address",children:[],level:4},{value:"data",id:"data-5",children:[],level:4},{value:"topics",id:"topics",children:[],level:4}],level:2},{value:"JsonRpcMethods Objects",id:"jsonrpcmethods-objects",children:[{value:"protocal_version",id:"protocal_version",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"block_number",id:"block_number",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"syncing",id:"syncing",children:[],level:4},{value:"Returns SyncingResponse",id:"returns-syncingresponse",children:[],level:4},{value:"coinbase",id:"coinbase",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"mining",id:"mining",children:[],level:4},{value:"Returns",id:"returns-3",children:[],level:4},{value:"hashrate",id:"hashrate",children:[],level:4},{value:"Returns",id:"returns-4",children:[],level:4},{value:"gas_price",id:"gas_price",children:[],level:4},{value:"Returns",id:"returns-5",children:[],level:4},{value:"accounts",id:"accounts",children:[],level:4},{value:"Returns",id:"returns-6",children:[],level:4},{value:"get_balance",id:"get_balance",children:[],level:4},{value:"Arguments",id:"arguments",children:[],level:4},{value:"Returns",id:"returns-7",children:[],level:4},{value:"get_storage_at",id:"get_storage_at",children:[],level:4},{value:"Arguments",id:"arguments-1",children:[],level:4},{value:"Returns",id:"returns-8",children:[],level:4},{value:"get_transaction_count",id:"get_transaction_count",children:[],level:4},{value:"Arguments",id:"arguments-2",children:[],level:4},{value:"Returns",id:"returns-9",children:[],level:4},{value:"get_transaction_count_by_hash",id:"get_transaction_count_by_hash",children:[],level:4},{value:"Arguments",id:"arguments-3",children:[],level:4},{value:"Returns",id:"returns-10",children:[],level:4},{value:"get_block_transaction_count_by_hash",id:"get_block_transaction_count_by_hash",children:[],level:4},{value:"Arguments",id:"arguments-4",children:[],level:4},{value:"Returns",id:"returns-11",children:[],level:4},{value:"get_block_transaction_count_by_number",id:"get_block_transaction_count_by_number",children:[],level:4},{value:"Arguments",id:"arguments-5",children:[],level:4},{value:"Returns",id:"returns-12",children:[],level:4},{value:"get_uncle_count_by_block_hash",id:"get_uncle_count_by_block_hash",children:[],level:4},{value:"Arguments",id:"arguments-6",children:[],level:4},{value:"Returns",id:"returns-13",children:[],level:4},{value:"get_uncle_count_by_block_number",id:"get_uncle_count_by_block_number",children:[],level:4},{value:"Arguments",id:"arguments-7",children:[],level:4},{value:"Returns",id:"returns-14",children:[],level:4},{value:"get_code",id:"get_code",children:[],level:4},{value:"Arguments",id:"arguments-8",children:[],level:4},{value:"Returns",id:"returns-15",children:[],level:4},{value:"sign",id:"sign",children:[],level:4},{value:"Arguments",id:"arguments-9",children:[],level:4},{value:"Returns",id:"returns-16",children:[],level:4},{value:"sign_transaction",id:"sign_transaction",children:[],level:4},{value:"Arguments",id:"arguments-10",children:[],level:4},{value:"Returns",id:"returns-17",children:[],level:4},{value:"send_transcation",id:"send_transcation",children:[],level:4},{value:"Arguments",id:"arguments-11",children:[],level:4},{value:"Returns",id:"returns-18",children:[],level:4},{value:"send_raw_transaction",id:"send_raw_transaction",children:[],level:4},{value:"Arguments",id:"arguments-12",children:[],level:4},{value:"Returns",id:"returns-19",children:[],level:4},{value:"call",id:"call",children:[],level:4},{value:"Arguments",id:"arguments-13",children:[],level:4},{value:"Returns",id:"returns-20",children:[],level:4},{value:"estimate_gas",id:"estimate_gas",children:[],level:4},{value:"Arguments",id:"arguments-14",children:[],level:4},{value:"Returns",id:"returns-21",children:[],level:4},{value:"get_block_by_hash",id:"get_block_by_hash",children:[],level:4},{value:"Arguments",id:"arguments-15",children:[],level:4},{value:"Returns GetBlockByHashResponseObj",id:"returns-getblockbyhashresponseobj",children:[],level:4},{value:"get_block_by_number",id:"get_block_by_number",children:[],level:4},{value:"Arguments",id:"arguments-16",children:[],level:4},{value:"Returns GetBlockByNumberResponseObj",id:"returns-getblockbynumberresponseobj",children:[],level:4},{value:"get_transaction_by_hash",id:"get_transaction_by_hash",children:[],level:4},{value:"Arguments",id:"arguments-17",children:[],level:4},{value:"Returns GetTransactionByHashResponseObj",id:"returns-gettransactionbyhashresponseobj",children:[],level:4},{value:"get_transaction_by_hash_and_index",id:"get_transaction_by_hash_and_index",children:[],level:4},{value:"Arguments",id:"arguments-18",children:[],level:4},{value:"Returns GetTransactionByHashAndIndexResponseObj",id:"returns-gettransactionbyhashandindexresponseobj",children:[],level:4},{value:"get_transaction_by_block_number_and_index",id:"get_transaction_by_block_number_and_index",children:[],level:4},{value:"Arguments",id:"arguments-19",children:[],level:4},{value:"Returns GetTransactionByBlockNumberAndIndexResponseObj",id:"returns-gettransactionbyblocknumberandindexresponseobj",children:[],level:4},{value:"get_transaction_receipt",id:"get_transaction_receipt",children:[],level:4},{value:"Arguments",id:"arguments-20",children:[],level:4},{value:"Returns GetTransactionReceiptResponseObj",id:"returns-gettransactionreceiptresponseobj",children:[],level:4},{value:"get_uncle_by_block_hash_and_index",id:"get_uncle_by_block_hash_and_index",children:[],level:4},{value:"Arguments",id:"arguments-21",children:[],level:4},{value:"Returns GetUncleByBlockHashAndIndexResponseObj",id:"returns-getunclebyblockhashandindexresponseobj",children:[],level:4},{value:"get_uncle_by_block_number_and_index",id:"get_uncle_by_block_number_and_index",children:[],level:4},{value:"Arguments",id:"arguments-22",children:[],level:4},{value:"Returns GetUncleByBlockNumberAndIndexResponseObj",id:"returns-getunclebyblocknumberandindexresponseobj",children:[],level:4},{value:"get_compliers",id:"get_compliers",children:[],level:4},{value:"Returns",id:"returns-22",children:[],level:4},{value:"compile_solidity",id:"compile_solidity",children:[],level:4},{value:"Arguments",id:"arguments-23",children:[],level:4},{value:"Returns",id:"returns-23",children:[],level:4},{value:"complpie_l_l_l",id:"complpie_l_l_l",children:[],level:4},{value:"Arguments",id:"arguments-24",children:[],level:4},{value:"Returns",id:"returns-24",children:[],level:4},{value:"complie_serpent",id:"complie_serpent",children:[],level:4},{value:"Arguments",id:"arguments-25",children:[],level:4},{value:"Returns",id:"returns-25",children:[],level:4},{value:"new_filter",id:"new_filter",children:[],level:4},{value:"Arguments",id:"arguments-26",children:[],level:4},{value:"Returns",id:"returns-26",children:[],level:4},{value:"new_block_filter",id:"new_block_filter",children:[],level:4},{value:"Returns",id:"returns-27",children:[],level:4},{value:"new_pending_transaction_filter",id:"new_pending_transaction_filter",children:[],level:4},{value:"Returns",id:"returns-28",children:[],level:4},{value:"uninstall_filter",id:"uninstall_filter",children:[],level:4},{value:"Arguments",id:"arguments-27",children:[],level:4},{value:"Returns",id:"returns-29",children:[],level:4},{value:"get_filter_changes",id:"get_filter_changes",children:[],level:4},{value:"Arguments",id:"arguments-28",children:[],level:4},{value:"Returns <code>List</code>Array",id:"returns-listarray",children:[],level:4},{value:"get_filter_logs",id:"get_filter_logs",children:[],level:4},{value:"Arguments",id:"arguments-29",children:[],level:4},{value:"Returns",id:"returns-30",children:[],level:4},{value:"get_logs",id:"get_logs",children:[],level:4},{value:"Arguments",id:"arguments-30",children:[],level:4},{value:"Returns",id:"returns-31",children:[],level:4},{value:"get_work",id:"get_work",children:[],level:4},{value:"Returns",id:"returns-32",children:[],level:4},{value:"submit_work",id:"submit_work",children:[],level:4},{value:"Arguments",id:"arguments-31",children:[],level:4},{value:"Returns",id:"returns-33",children:[],level:4},{value:"submit_hashrate",id:"submit_hashrate",children:[],level:4},{value:"Arguments",id:"arguments-32",children:[],level:4},{value:"Returns",id:"returns-34",children:[],level:4}],level:2}],u={toc:d};function h(e){var t=e.components,n=(0,l.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"syncingresponsesyncobject-objects"},"SyncingResponseSyncObject Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass SyncingResponseSyncObject()\n")),(0,s.kt)("h4",{id:"startingblock"},"startingBlock"),(0,s.kt)("p",null,"The block at which the import started (will only be reset, after the sync reached his head)"),(0,s.kt)("h4",{id:"currentblock"},"currentBlock"),(0,s.kt)("p",null,"The current block, same as eth_blockNumber"),(0,s.kt)("h4",{id:"highestblock"},"highestBlock"),(0,s.kt)("p",null,"The estimated highest block"),(0,s.kt)("h2",{id:"syncingresponse-objects"},"SyncingResponse Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass SyncingResponse()\n")),(0,s.kt)("h4",{id:"syncobject"},"syncObject"),(0,s.kt)("p",null,"return this ONLY when syncing"),(0,s.kt)("h4",{id:"syncstatus"},"syncStatus"),(0,s.kt)("p",null,"return this ONLY when not syncing"),(0,s.kt)("h2",{id:"obj-objects"},"Obj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Obj()\n")),(0,s.kt)("h4",{id:"from_field"},"from","_","field"),(0,s.kt)("p",null,"data, 20 Bytes - The address the transaction is sent from."),(0,s.kt)("h4",{id:"to"},"to"),(0,s.kt)("p",null,"data, 20 Bytes - (optional when creating new contract) The address the transaction is directed to."),(0,s.kt)("h4",{id:"gas"},"gas"),(0,s.kt)("p",null,"quantity - (optional, default ",'"',"90000",'"',") Integer of the gas provided for the transaction execution. It will return unused gas."),(0,s.kt)("h4",{id:"gasprice"},"gasPrice"),(0,s.kt)("p",null,"quantity - (optional, default ",'"',"To-Be-Determined",'"',") Integer of the gasPrice used for each paid gas, in Wei."),(0,s.kt)("h4",{id:"value"},"value"),(0,s.kt)("p",null,"quantity - (optional) Integer of the value sent with this transaction, in Wei."),(0,s.kt)("h4",{id:"data"},"data"),(0,s.kt)("p",null,"data - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. For details see etherdata Contract ABI."),(0,s.kt)("h4",{id:"nonce"},"nonce"),(0,s.kt)("p",null,"quantity - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce."),(0,s.kt)("h2",{id:"getblockbyhashresponseobj-objects"},"GetBlockByHashResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetBlockByHashResponseObj()\n")),(0,s.kt)("h4",{id:"number"},"number"),(0,s.kt)("p",null,"quantity - The block number. null when its pending block."),(0,s.kt)("h4",{id:"hash"},"hash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the block. null when its pending block."),(0,s.kt)("h4",{id:"parnethash"},"parnetHash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the parent block."),(0,s.kt)("h4",{id:"nonce-1"},"nonce"),(0,s.kt)("p",null,"data, 8 Bytes - hash of the generated proof-of-work. null when its pending block."),(0,s.kt)("h4",{id:"sha3uncles"},"sha3Uncles"),(0,s.kt)("p",null,"data, 32 Bytes - SHA3 of the uncles data in the block."),(0,s.kt)("h4",{id:"logsbloom"},"logsBloom"),(0,s.kt)("p",null,"data, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."),(0,s.kt)("h4",{id:"transactionsroot"},"transactionsRoot"),(0,s.kt)("p",null,"data, 32 Bytes - the root of the transaction trie of the block."),(0,s.kt)("h4",{id:"miner"},"miner"),(0,s.kt)("p",null,"data, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."),(0,s.kt)("h4",{id:"difficulty"},"difficulty"),(0,s.kt)("p",null,"quantity - integer of the difficulty for this block."),(0,s.kt)("h4",{id:"totaldifficulty"},"totalDifficulty"),(0,s.kt)("p",null,"quantity - integer of the total difficulty of the chain until this block."),(0,s.kt)("h4",{id:"extradata"},"extradata"),(0,s.kt)("p",null,"data - the \u201cextra data\u201d field of this block."),(0,s.kt)("h4",{id:"size"},"size"),(0,s.kt)("p",null,"quantity - integer the size of this block in bytes."),(0,s.kt)("h4",{id:"gaslimit"},"gasLimit"),(0,s.kt)("p",null,"quantity - the maximum gas allowed in this block."),(0,s.kt)("h4",{id:"gasused"},"gasUsed"),(0,s.kt)("p",null,"quantity - the total used gas by all transactions in this block."),(0,s.kt)("h4",{id:"timestamp"},"timestamp"),(0,s.kt)("p",null,"quantity - the unix timestamp for when the block was collated."),(0,s.kt)("h4",{id:"transaction"},"transaction"),(0,s.kt)("p",null,"Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."),(0,s.kt)("h4",{id:"uncles"},"uncles"),(0,s.kt)("p",null,"Array - Array of uncle hashes."),(0,s.kt)("h2",{id:"getblockbynumberresponseobj-objects"},"GetBlockByNumberResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetBlockByNumberResponseObj()\n")),(0,s.kt)("h4",{id:"number-1"},"number"),(0,s.kt)("p",null,"quantity - The block number. null when its pending block."),(0,s.kt)("h4",{id:"hash-1"},"hash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the block. null when its pending block."),(0,s.kt)("h4",{id:"parnethash-1"},"parnetHash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the parent block."),(0,s.kt)("h4",{id:"nonce-2"},"nonce"),(0,s.kt)("p",null,"data, 8 Bytes - hash of the generated proof-of-work. null when its pending block."),(0,s.kt)("h4",{id:"sha3uncles-1"},"sha3Uncles"),(0,s.kt)("p",null,"data, 32 Bytes - SHA3 of the uncles data in the block."),(0,s.kt)("h4",{id:"logsbloom-1"},"logsBloom"),(0,s.kt)("p",null,"data, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."),(0,s.kt)("h4",{id:"transactionsroot-1"},"transactionsRoot"),(0,s.kt)("p",null,"data, 32 Bytes - the root of the transaction trie of the block."),(0,s.kt)("h4",{id:"miner-1"},"miner"),(0,s.kt)("p",null,"data, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."),(0,s.kt)("h4",{id:"difficulty-1"},"difficulty"),(0,s.kt)("p",null,"quantity - integer of the difficulty for this block."),(0,s.kt)("h4",{id:"totaldifficulty-1"},"totalDifficulty"),(0,s.kt)("p",null,"quantity - integer of the total difficulty of the chain until this block."),(0,s.kt)("h4",{id:"extradata-1"},"extradata"),(0,s.kt)("p",null,"data - the \u201cextra data\u201d field of this block."),(0,s.kt)("h4",{id:"size-1"},"size"),(0,s.kt)("p",null,"quantity - integer the size of this block in bytes."),(0,s.kt)("h4",{id:"gaslimit-1"},"gasLimit"),(0,s.kt)("p",null,"quantity - the maximum gas allowed in this block."),(0,s.kt)("h4",{id:"gasused-1"},"gasUsed"),(0,s.kt)("p",null,"quantity - the total used gas by all transactions in this block."),(0,s.kt)("h4",{id:"timestamp-1"},"timestamp"),(0,s.kt)("p",null,"quantity - the unix timestamp for when the block was collated."),(0,s.kt)("h4",{id:"transaction-1"},"transaction"),(0,s.kt)("p",null,"Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."),(0,s.kt)("h4",{id:"uncles-1"},"uncles"),(0,s.kt)("p",null,"Array - Array of uncle hashes."),(0,s.kt)("h2",{id:"gettransactionbyhashresponseobj-objects"},"GetTransactionByHashResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetTransactionByHashResponseObj()\n")),(0,s.kt)("h4",{id:"blockhash"},"blockHash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the block where this transaction was in. null when its pending."),(0,s.kt)("h4",{id:"blocknumber"},"blockNumber"),(0,s.kt)("p",null,"quantity - block number where this transaction was in. null when its pending."),(0,s.kt)("h4",{id:"from_field-1"},"from","_","field"),(0,s.kt)("p",null,"data, 20 Bytes - address of the sender."),(0,s.kt)("h4",{id:"gas-1"},"gas"),(0,s.kt)("p",null,"quantity - gas provided by the sender."),(0,s.kt)("h4",{id:"gasprice-1"},"gasPrice"),(0,s.kt)("p",null,"quantity - gas price provided by the sender in Wei."),(0,s.kt)("h4",{id:"hash-2"},"hash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the transaction."),(0,s.kt)("h4",{id:"input"},"input"),(0,s.kt)("p",null,"data - the data send along with the transaction."),(0,s.kt)("h4",{id:"nonce-3"},"nonce"),(0,s.kt)("p",null,"quantity - the number of transactions made by the sender prior to this one."),(0,s.kt)("h4",{id:"to-1"},"to"),(0,s.kt)("p",null,"data, 20 Bytes - address of the receiver. null when its a contract creation transaction."),(0,s.kt)("h4",{id:"transactionindex"},"transactionIndex"),(0,s.kt)("p",null,"quantity - integer of the transactions index position in the block. null when its pending."),(0,s.kt)("h4",{id:"value-1"},"value"),(0,s.kt)("p",null,"quantity - value transferred in Wei."),(0,s.kt)("h4",{id:"v"},"v"),(0,s.kt)("p",null,"quantity - ECDSA recovery id"),(0,s.kt)("h4",{id:"r"},"r"),(0,s.kt)("p",null,"data, 32 Bytes - ECDSA signature r"),(0,s.kt)("h4",{id:"s"},"s"),(0,s.kt)("p",null,"data, 32 Bytes - ECDSA signature s"),(0,s.kt)("h2",{id:"gettransactionbyhashandindexresponseobj-objects"},"GetTransactionByHashAndIndexResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetTransactionByHashAndIndexResponseObj()\n")),(0,s.kt)("h4",{id:"data-1"},"data"),(0,s.kt)("h2",{id:"gettransactionbyblocknumberandindexresponseobj-objects"},"GetTransactionByBlockNumberAndIndexResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetTransactionByBlockNumberAndIndexResponseObj()\n")),(0,s.kt)("h4",{id:"data-2"},"data"),(0,s.kt)("h2",{id:"gettransactionreceiptresponseobj-objects"},"GetTransactionReceiptResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetTransactionReceiptResponseObj()\n")),(0,s.kt)("h4",{id:"transactionhash"},"transactionHash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the transaction."),(0,s.kt)("h4",{id:"transactionindex-1"},"transactionIndex"),(0,s.kt)("p",null,"quantity - integer of the transactions index position in the block."),(0,s.kt)("h4",{id:"blockhash-1"},"blockHash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the block where this transaction was in."),(0,s.kt)("h4",{id:"blocknumber-1"},"blockNumber"),(0,s.kt)("p",null,"quantity - block number where this transaction was in."),(0,s.kt)("h4",{id:"from_field-2"},"from","_","field"),(0,s.kt)("p",null,"data, 20 Bytes - address of the sender."),(0,s.kt)("h4",{id:"to-2"},"to"),(0,s.kt)("p",null,"data, 20 Bytes - address of the receiver. null when its a contract creation transaction."),(0,s.kt)("h4",{id:"cumulativegasused"},"cumulativeGasUsed"),(0,s.kt)("p",null,"quantity - The total amount of gas used when this transaction was executed in the block."),(0,s.kt)("h4",{id:"gasused-2"},"gasUsed"),(0,s.kt)("p",null,"quantity - The amount of gas used by this specific transaction alone."),(0,s.kt)("h4",{id:"contractaddress"},"contractAddress"),(0,s.kt)("p",null,"data, 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null."),(0,s.kt)("h4",{id:"logs"},"logs"),(0,s.kt)("p",null,"Array - Array of log objects, which this transaction generated."),(0,s.kt)("h4",{id:"logsbloom-2"},"logsBloom"),(0,s.kt)("p",null,"data, 256 Bytes - Bloom filter for light clients to quickly retrieve related logs."),(0,s.kt)("h4",{id:"root"},"root"),(0,s.kt)("p",null,"Either this or ",'"',"status",'"'," is returned data 32 bytes of post-transaction stateroot (pre Byzantium)"),(0,s.kt)("h4",{id:"status"},"status"),(0,s.kt)("p",null,"Either this or ",'"',"root",'"'," is returned quantity either 1 (success) or 0 (failure)"),(0,s.kt)("h2",{id:"getunclebyblockhashandindexresponseobj-objects"},"GetUncleByBlockHashAndIndexResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetUncleByBlockHashAndIndexResponseObj()\n")),(0,s.kt)("h4",{id:"data-3"},"data"),(0,s.kt)("h2",{id:"getunclebyblocknumberandindexresponseobj-objects"},"GetUncleByBlockNumberAndIndexResponseObj Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass GetUncleByBlockNumberAndIndexResponseObj()\n")),(0,s.kt)("h4",{id:"data-4"},"data"),(0,s.kt)("h2",{id:"array-objects"},"Array Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Array()\n")),(0,s.kt)("h4",{id:"removed"},"removed"),(0,s.kt)("p",null,"TAG - true when the log was removed, due to a chain reorganization. false if its a valid log."),(0,s.kt)("h4",{id:"logindex"},"logIndex"),(0,s.kt)("p",null,"quantity - integer of the log index position in the block. null when its pending log."),(0,s.kt)("h4",{id:"transactionindex-2"},"transactionIndex"),(0,s.kt)("p",null,"quantity - integer of the transactions index position log was created from. null when its pending log."),(0,s.kt)("h4",{id:"transactionhash-1"},"transactionHash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the transactions this log was created from. null when its pending log."),(0,s.kt)("h4",{id:"blockhash-2"},"blockHash"),(0,s.kt)("p",null,"data, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log."),(0,s.kt)("h4",{id:"blocknumber-2"},"blockNumber"),(0,s.kt)("p",null,"quantity - the block number where this log was in. null when its pending. null when its pending log."),(0,s.kt)("h4",{id:"address"},"address"),(0,s.kt)("p",null,"data, 20 Bytes - address from which this log originated."),(0,s.kt)("h4",{id:"data-5"},"data"),(0,s.kt)("p",null,"data - contains one or more 32 Bytes non-indexed arguments of the log."),(0,s.kt)("h4",{id:"topics"},"topics"),(0,s.kt)("p",null,"Array of data - Array of 0 to 4 32 Bytes data of indexed log arguments. (In solidity - The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.)"),(0,s.kt)("h2",{id:"jsonrpcmethods-objects"},"JsonRpcMethods Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class JsonRpcMethods()\n")),(0,s.kt)("p",null,"different methods to perform etd control"),(0,s.kt)("h4",{id:"protocal_version"},"protocal","_","version"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def protocal_version() -> str\n")),(0,s.kt)("p",null,"Returns the current etherdata protocol version"),(0,s.kt)("h4",{id:"returns"},"Returns"),(0,s.kt)("p",null,"version: The current etherdata protocol version"),(0,s.kt)("h4",{id:"block_number"},"block","_","number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def block_number() -> str\n")),(0,s.kt)("p",null,"Returns the current block number"),(0,s.kt)("h4",{id:"returns-1"},"Returns"),(0,s.kt)("p",null,"blockNumber: The current blockNumber"),(0,s.kt)("h4",{id:"syncing"},"syncing"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def syncing() -> SyncingResponse\n")),(0,s.kt)("p",null,"Returns an object with data about the sync status or false"),(0,s.kt)("h4",{id:"returns-syncingresponse"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#syncingresponse-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"SyncingResponse"))),(0,s.kt)("p",null,"syncObject: return this ONLY when syncing\nsyncStatus: return this ONLY when not syncing"),(0,s.kt)("h4",{id:"coinbase"},"coinbase"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def coinbase() -> Any\n")),(0,s.kt)("p",null,"Returns the client coinbase address"),(0,s.kt)("h4",{id:"returns-2"},"Returns"),(0,s.kt)("p",null,"coinbase: The client coinbase address"),(0,s.kt)("h4",{id:"mining"},"mining"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def mining() -> bool\n")),(0,s.kt)("p",null,"Returns true if client is actively mining new blocks"),(0,s.kt)("h4",{id:"returns-3"},"Returns"),(0,s.kt)("p",null,"isMining: True if client is actively mining new blocks."),(0,s.kt)("h4",{id:"hashrate"},"hashrate"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def hashrate() -> Any\n")),(0,s.kt)("p",null,"Returns the number of hashes per second that the node is mining with"),(0,s.kt)("h4",{id:"returns-4"},"Returns"),(0,s.kt)("p",null,"hashrate: The number of hashes per second that the node is mining with"),(0,s.kt)("h4",{id:"gas_price"},"gas","_","price"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def gas_price() -> Any\n")),(0,s.kt)("p",null,"Returns the current price per gas in wei"),(0,s.kt)("h4",{id:"returns-5"},"Returns"),(0,s.kt)("p",null,"gasPrice: The current price per gas in wei (8049999872 Wei in the example)"),(0,s.kt)("h4",{id:"accounts"},"accounts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def accounts() -> List[Any]\n")),(0,s.kt)("p",null,"Returns a list of addresses owned by client"),(0,s.kt)("h4",{id:"returns-6"},"Returns"),(0,s.kt)("p",null,"addressAccount: The array of accouts"),(0,s.kt)("h4",{id:"get_balance"},"get","_","balance"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_balance(address: str, tag: str) -> float\n")),(0,s.kt)("p",null,"Returns the balance of the account of given address"),(0,s.kt)("h4",{id:"arguments"},"Arguments"),(0,s.kt)("p",null,"address: data, 20 Bytes - address to check for balance\ntag: quantity_tag - integer block number, or the string ",'"',"latest",'"',", ",'"',"earliest",'"'," or ",'"',"pending",'"',", see the default block parameter"),(0,s.kt)("h4",{id:"returns-7"},"Returns"),(0,s.kt)("p",null,"balance: quantity - integer of the current balance in wei."),(0,s.kt)("h4",{id:"get_storage_at"},"get","_","storage","_","at"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_storage_at(address: Any, position: Any, tag: str) -> Any\n")),(0,s.kt)("p",null,"Returns the value from a storage position at a given address"),(0,s.kt)("h4",{id:"arguments-1"},"Arguments"),(0,s.kt)("p",null,"address: data, 20 Bytes - address of the storage.\nposition: The integer of the position in the storage.\ntag: quantity_tag - integer block number, or the string ",'"',"latest",'"',", ",'"',"earliest",'"'," or ",'"',"pending",'"',", see the default block parameter"),(0,s.kt)("h4",{id:"returns-8"},"Returns"),(0,s.kt)("p",null,"valur: The value at this storage position."),(0,s.kt)("h4",{id:"get_transaction_count"},"get","_","transaction","_","count"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_transaction_count(address: Any, state: str) -> float\n")),(0,s.kt)("p",null,"Returns the number of transactions sent from an address"),(0,s.kt)("h4",{id:"arguments-2"},"Arguments"),(0,s.kt)("p",null,"address: The address.\nstate: quantity_tag - integer block number, or the string ",'"',"latest",'"',", ",'"',"earliest",'"'," or ",'"',"pending",'"',", see the default block parameter"),(0,s.kt)("h4",{id:"returns-9"},"Returns"),(0,s.kt)("p",null,"number: The number of transactions send from this address."),(0,s.kt)("h4",{id:"get_transaction_count_by_hash"},"get","_","transaction","_","count","_","by","_","hash"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_transaction_count_by_hash(data: str, quantity_tag: str) -> str\n")),(0,s.kt)("p",null,"Returns the number of transactions in a block from a block matching the given block hash"),(0,s.kt)("h4",{id:"arguments-3"},"Arguments"),(0,s.kt)("p",null,"data: 20 Bytes - The address\nquantity_tag: integer block number, or the string ",'"',"latest",'"',", ",'"',"earliest",'"'," or ",'"',"pending",'"',", see the default block parameter"),(0,s.kt)("h4",{id:"returns-10"},"Returns"),(0,s.kt)("p",null,"quantity: The integer of the number of transactions send from this address."),(0,s.kt)("h4",{id:"get_block_transaction_count_by_hash"},"get","_","block","_","transaction","_","count","_","by","_","hash"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_block_transaction_count_by_hash(data: str) -> str\n")),(0,s.kt)("p",null,"Returns the number of transactions in a block from a block matching the given block hash"),(0,s.kt)("h4",{id:"arguments-4"},"Arguments"),(0,s.kt)("p",null,"data: 32 Bytes - The hash of a block"),(0,s.kt)("h4",{id:"returns-11"},"Returns"),(0,s.kt)("p",null,"quantity: The integer of the number of transactions in this block."),(0,s.kt)("h4",{id:"get_block_transaction_count_by_number"},"get","_","block","_","transaction","_","count","_","by","_","number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_block_transaction_count_by_number(quantity_tag: str) -> str\n")),(0,s.kt)("p",null,"Returns the number of transactions in a block matching the given block number"),(0,s.kt)("h4",{id:"arguments-5"},"Arguments"),(0,s.kt)("p",null,"quantity_tag: The integer of a block number, or the string ",'"',"earliest",'"',", ",'"',"latest",'"'," or ",'"',"pending",'"',", see the default block parameter"),(0,s.kt)("h4",{id:"returns-12"},"Returns"),(0,s.kt)("p",null,"quantity: The integer of the number of transactions in this block."),(0,s.kt)("h4",{id:"get_uncle_count_by_block_hash"},"get","_","uncle","_","count","_","by","_","block","_","hash"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_uncle_count_by_block_hash(data: str) -> str\n")),(0,s.kt)("p",null,"Returns the number of uncles in a block from a block matching the given block hash"),(0,s.kt)("h4",{id:"arguments-6"},"Arguments"),(0,s.kt)("p",null,"data: 32 Bytes - The hash of a block"),(0,s.kt)("h4",{id:"returns-13"},"Returns"),(0,s.kt)("p",null,"quantity_tag: The integer of the number of uncles in this block."),(0,s.kt)("h4",{id:"get_uncle_count_by_block_number"},"get","_","uncle","_","count","_","by","_","block","_","number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_uncle_count_by_block_number(quantity_tag: str) -> str\n")),(0,s.kt)("p",null,"Returns the number of uncles in a block from a block matching the given block number"),(0,s.kt)("h4",{id:"arguments-7"},"Arguments"),(0,s.kt)("p",null,"quantity_tag: The integer of a block number, or the string \u201clatest\u201d, \u201cearliest\u201d or \u201cpending\u201d, see the default block parameter"),(0,s.kt)("h4",{id:"returns-14"},"Returns"),(0,s.kt)("p",null,"quantity: The integer of the number of uncles in this block."),(0,s.kt)("h4",{id:"get_code"},"get","_","code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_code(data: str, quantity_tag: str) -> str\n")),(0,s.kt)("p",null,"Returns code at a given address"),(0,s.kt)("h4",{id:"arguments-8"},"Arguments"),(0,s.kt)("p",null,"data: 20 Byter - The address\nquantity_tag: The integer block number, or the string ",'"',"latest",'"',", ",'"',"earliest",'"'," or ",'"',"pending",'"',", see the default block parameter"),(0,s.kt)("h4",{id:"returns-15"},"Returns"),(0,s.kt)("p",null,"data: The code from the given address."),(0,s.kt)("h4",{id:"sign"},"sign"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def sign(a: str, b: str) -> str\n")),(0,s.kt)("p",null,"The sign method calculates an etherdata specific signature with sign(keccak256(",'"',"\\x19etherdata Signed Message:\\n",'"'," + len(message) + message)))"),(0,s.kt)("p",null,"By adding a prefix to the message makes the calculated signature recognisable as an etherdata specific signature\nThis prevents misuse where a malicious DApp can sign arbitrary data (e\ng\ntransaction) and use the signature to impersonate the victim"),(0,s.kt)("p",null,"Note the address to sign with must be unlocked"),(0,s.kt)("h4",{id:"arguments-9"},"Arguments"),(0,s.kt)("p",null,"a: 20 Bytes - The address\nb: N Bytes - The message to sign"),(0,s.kt)("h4",{id:"returns-16"},"Returns"),(0,s.kt)("p",null,"value: The signature"),(0,s.kt)("h4",{id:"sign_transaction"},"sign","_","transaction"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def sign_transaction(obj: Obj) -> str\n")),(0,s.kt)("p",null,"Signs a transaction that can be submitted to the network at a later time using with eth_sendRawTransaction"),(0,s.kt)("h4",{id:"arguments-10"},"Arguments"),(0,s.kt)("p",null,"obj: The transaction object"),(0,s.kt)("h4",{id:"returns-17"},"Returns"),(0,s.kt)("p",null,"data: The signed transaction object."),(0,s.kt)("h4",{id:"send_transcation"},"send","_","transcation"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def send_transcation(obj: Obj) -> str\n")),(0,s.kt)("p",null,"Creates new message call transaction or a contract creation, if the data field contains code"),(0,s.kt)("h4",{id:"arguments-11"},"Arguments"),(0,s.kt)("p",null,"obj: The transaction object"),(0,s.kt)("h4",{id:"returns-18"},"Returns"),(0,s.kt)("p",null,"data: 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract."),(0,s.kt)("h4",{id:"send_raw_transaction"},"send","_","raw","_","transaction"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def send_raw_transaction(data: str) -> str\n")),(0,s.kt)("p",null,"Creates new message call transaction or a contract creation for signed transactions"),(0,s.kt)("h4",{id:"arguments-12"},"Arguments"),(0,s.kt)("p",null,"data: The signed transaction data."),(0,s.kt)("h4",{id:"returns-19"},"Returns"),(0,s.kt)("p",null,"data: 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available. Use eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract."),(0,s.kt)("h4",{id:"call"},"call"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def call(obj: Obj, quantity_tag: str) -> str\n")),(0,s.kt)("p",null,"Executes a new message call immediately without creating a transaction on the block chain"),(0,s.kt)("h4",{id:"arguments-13"},"Arguments"),(0,s.kt)("p",null,"obj: The transaction object\nquantity_tag: The integer block number, or the string ",'"',"latest",'"',", ",'"',"earliest",'"'," or ",'"',"pending",'"',", see the default block parameter."),(0,s.kt)("h4",{id:"returns-20"},"Returns"),(0,s.kt)("p",null,"data: The return value of executed contract."),(0,s.kt)("h4",{id:"estimate_gas"},"estimate","_","gas"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def estimate_gas(obj: Obj, quantity_tag: str) -> str\n")),(0,s.kt)("p",null,"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete\nThe transaction will not be added to the blockchain\nNote that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance"),(0,s.kt)("h4",{id:"arguments-14"},"Arguments"),(0,s.kt)("p",null,"obj: The transaction object\nquantity_tag: The integer block number, or the string ",'"',"latest",'"',", ",'"',"earliest",'"'," or ",'"',"pending",'"',", see the default block parameter."),(0,s.kt)("h4",{id:"returns-21"},"Returns"),(0,s.kt)("p",null,"quantity: The amount of gas used."),(0,s.kt)("h4",{id:"get_block_by_hash"},"get","_","block","_","by","_","hash"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_block_by_hash(data: str,\n                      bool_field: bool) -> GetBlockByHashResponseObj\n")),(0,s.kt)("p",null,"Returns information about a block by hash"),(0,s.kt)("h4",{id:"arguments-15"},"Arguments"),(0,s.kt)("p",null,"data: 32 Bytes - Hash of a block.\nbool: If true it returns the full transaction objects, if false only the hashes of the transactions."),(0,s.kt)("h4",{id:"returns-getblockbyhashresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#getblockbyhashresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetBlockByHashResponseObj"))),(0,s.kt)("p",null,"obj: A block object, or null when no block was found"),(0,s.kt)("h4",{id:"get_block_by_number"},"get","_","block","_","by","_","number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_block_by_number(quantity_tag: str,\n                        bool_field: bool) -> GetBlockByNumberResponseObj\n")),(0,s.kt)("p",null,"Returns information about a block by block number"),(0,s.kt)("h4",{id:"arguments-16"},"Arguments"),(0,s.kt)("p",null,"quantity_tag: The integer of a block number, or the string ",'"',"earliest",'"',", ",'"',"latest",'"'," or ",'"',"pending",'"',", as in the default block parameter.\nbool: If true it returns the full transaction objects, if false only the hashes of the transactions."),(0,s.kt)("h4",{id:"returns-getblockbynumberresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#getblockbynumberresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetBlockByNumberResponseObj"))),(0,s.kt)("p",null,"obj: A block object, or null when no block was found"),(0,s.kt)("h4",{id:"get_transaction_by_hash"},"get","_","transaction","_","by","_","hash"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_transaction_by_hash(data: str) -> GetTransactionByHashResponseObj\n")),(0,s.kt)("p",null,"Returns the information about a transaction requested by transaction hash"),(0,s.kt)("h4",{id:"arguments-17"},"Arguments"),(0,s.kt)("p",null,"data: 32 Bytes - hash of a transaction"),(0,s.kt)("h4",{id:"returns-gettransactionbyhashresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#gettransactionbyhashresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetTransactionByHashResponseObj"))),(0,s.kt)("p",null,"obj: A transaction object, or null when no transaction was found"),(0,s.kt)("h4",{id:"get_transaction_by_hash_and_index"},"get","_","transaction","_","by","_","hash","_","and","_","index"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_transaction_by_hash_and_index(\n        data: str, quantity: str) -> GetTransactionByHashAndIndexResponseObj\n")),(0,s.kt)("p",null,"Returns information about a transaction by block hash and transaction index position"),(0,s.kt)("h4",{id:"arguments-18"},"Arguments"),(0,s.kt)("p",null,"data: 32 Bytes - hash of a block.\nquantity: The integer of the transaction index position."),(0,s.kt)("h4",{id:"returns-gettransactionbyhashandindexresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#gettransactionbyhashandindexresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetTransactionByHashAndIndexResponseObj"))),(0,s.kt)("p",null,"obj: See eth_getTransactionByHash"),(0,s.kt)("h4",{id:"get_transaction_by_block_number_and_index"},"get","_","transaction","_","by","_","block","_","number","_","and","_","index"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_transaction_by_block_number_and_index(\n        quantity_tag: str,\n        quantity: str) -> GetTransactionByBlockNumberAndIndexResponseObj\n")),(0,s.kt)("p",null,"Returns information about a transaction by block number and transaction index position"),(0,s.kt)("h4",{id:"arguments-19"},"Arguments"),(0,s.kt)("p",null,"quantity_tag: a block number, or the string ",'"',"earliest",'"',", ",'"',"latest",'"'," or ",'"',"pending",'"',", as in the default block parameter.\nquantity: The transaction index position."),(0,s.kt)("h4",{id:"returns-gettransactionbyblocknumberandindexresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#gettransactionbyblocknumberandindexresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetTransactionByBlockNumberAndIndexResponseObj"))),(0,s.kt)("p",null,"obj: See eth_getTransactionByHash"),(0,s.kt)("h4",{id:"get_transaction_receipt"},"get","_","transaction","_","receipt"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_transaction_receipt(data: str) -> GetTransactionReceiptResponseObj\n")),(0,s.kt)("p",null,"Returns the receipt of a transaction by transaction hash\nNote That the receipt is not available for pending transactions"),(0,s.kt)("h4",{id:"arguments-20"},"Arguments"),(0,s.kt)("p",null,"data: 32 Bytes - hash of a transaction"),(0,s.kt)("h4",{id:"returns-gettransactionreceiptresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#gettransactionreceiptresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetTransactionReceiptResponseObj"))),(0,s.kt)("p",null,"obj: A transaction receipt object, or null when no receipt was found"),(0,s.kt)("h4",{id:"get_uncle_by_block_hash_and_index"},"get","_","uncle","_","by","_","block","_","hash","_","and","_","index"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_uncle_by_block_hash_and_index(\n        data: str, quantity: str) -> GetUncleByBlockHashAndIndexResponseObj\n")),(0,s.kt)("p",null,"eturns information about a uncle of a block by hash and uncle index position"),(0,s.kt)("h4",{id:"arguments-21"},"Arguments"),(0,s.kt)("p",null,"data: 32 Bytes - The hash of a block.\nquantity: The uncle\u2019s index position."),(0,s.kt)("h4",{id:"returns-getunclebyblockhashandindexresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#getunclebyblockhashandindexresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetUncleByBlockHashAndIndexResponseObj"))),(0,s.kt)("p",null,"obj: See eth_getTransactionByHash Note - An uncle doesn\u2019t contain individual transactions."),(0,s.kt)("h4",{id:"get_uncle_by_block_number_and_index"},"get","_","uncle","_","by","_","block","_","number","_","and","_","index"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_uncle_by_block_number_and_index(\n        quantity_tag: str,\n        quantity: str) -> GetUncleByBlockNumberAndIndexResponseObj\n")),(0,s.kt)("p",null,"Returns information about a uncle of a block by number and uncle index position"),(0,s.kt)("h4",{id:"arguments-22"},"Arguments"),(0,s.kt)("p",null,"quantity_tag: a block number, or the string ",'"',"earliest",'"',", ",'"',"latest",'"'," or ",'"',"pending",'"',", as in the default block parameter.\nquantity: the uncle\u2019s index position."),(0,s.kt)("h4",{id:"returns-getunclebyblocknumberandindexresponseobj"},"Returns ",(0,s.kt)("a",{parentName:"h4",href:"#getunclebyblocknumberandindexresponseobj-objects"},(0,s.kt)("inlineCode",{parentName:"a"},"GetUncleByBlockNumberAndIndexResponseObj"))),(0,s.kt)("p",null,"obj: See eth_getTransactionByHash Note - An uncle doesn\u2019t contain individual transactions."),(0,s.kt)("h4",{id:"get_compliers"},"get","_","compliers"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_compliers() -> List[str]\n")),(0,s.kt)("p",null,"Returns a list of available compilers in the client"),(0,s.kt)("h4",{id:"returns-22"},"Returns"),(0,s.kt)("p",null,"array: Array of available compilers."),(0,s.kt)("h4",{id:"compile_solidity"},"compile","_","solidity"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def compile_solidity(string: str) -> str\n")),(0,s.kt)("p",null,"Returns compiled solidity code"),(0,s.kt)("h4",{id:"arguments-23"},"Arguments"),(0,s.kt)("p",null,"string: The source code."),(0,s.kt)("h4",{id:"returns-23"},"Returns"),(0,s.kt)("p",null,"data: The compiled source code."),(0,s.kt)("h4",{id:"complpie_l_l_l"},"complpie","_","l","_","l","_","l"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def complpie_l_l_l(string: str) -> str\n")),(0,s.kt)("p",null,"Returns compiled LLL code"),(0,s.kt)("h4",{id:"arguments-24"},"Arguments"),(0,s.kt)("p",null,"string: The source code."),(0,s.kt)("h4",{id:"returns-24"},"Returns"),(0,s.kt)("p",null,"data: The compiled source code."),(0,s.kt)("h4",{id:"complie_serpent"},"complie","_","serpent"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def complie_serpent(string: str) -> str\n")),(0,s.kt)("p",null,"Returns compiled serpent code"),(0,s.kt)("h4",{id:"arguments-25"},"Arguments"),(0,s.kt)("p",null,"string: The source code."),(0,s.kt)("h4",{id:"returns-25"},"Returns"),(0,s.kt)("p",null,"data: The compiled source code."),(0,s.kt)("h4",{id:"new_filter"},"new","_","filter"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def new_filter(obj: Obj) -> str\n")),(0,s.kt)("p",null,"Creates a filter object, based on filter options, to notify when the state changes (logs)\nTo check if the state has changed, call eth_getFilterChanges"),(0,s.kt)("p",null,"A note on specifying topic filters Topics are order-dependent\nA transaction with a log with topics ","[A, B]"," will be matched by the following topic filters\n-[] \u201canything\u201d -","[A]"," \u201cA in first position (and anything after)\u201d -","[null, B]"," \u201canything in first position AND B in second position (and anything after)\u201d -","[A, B]"," \u201cA in first position AND B in second position (and anything after)\u201d -[","[A, B]",", ","[A, B]","] \u201c(A OR B) in first position AND (A OR B) in second position (and anything after)\u201d"),(0,s.kt)("h4",{id:"arguments-26"},"Arguments"),(0,s.kt)("p",null,"obj: The filter options"),(0,s.kt)("h4",{id:"returns-26"},"Returns"),(0,s.kt)("p",null,"quantity: A filter id."),(0,s.kt)("h4",{id:"new_block_filter"},"new","_","block","_","filter"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def new_block_filter() -> str\n")),(0,s.kt)("p",null,"Creates a filter in the node, to notify when a new block arrives\nTo check if the state has changed, call eth_getFilterChanges"),(0,s.kt)("h4",{id:"returns-27"},"Returns"),(0,s.kt)("p",null,"quantity: A filter id."),(0,s.kt)("h4",{id:"new_pending_transaction_filter"},"new","_","pending","_","transaction","_","filter"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def new_pending_transaction_filter() -> str\n")),(0,s.kt)("p",null,"Creates a filter in the node, to notify when new pending transactions arrive\nTo check if the state has changed, call eth_getFilterChanges"),(0,s.kt)("h4",{id:"returns-28"},"Returns"),(0,s.kt)("p",null,"quantity: A filter id."),(0,s.kt)("h4",{id:"uninstall_filter"},"uninstall","_","filter"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def uninstall_filter(quantity: str) -> bool\n")),(0,s.kt)("p",null,"Uninstalls a filter with given id\nShould always be called when watch is no longer needed\nAdditonally Filters timeout when they aren\u2019t requested with eth_getFilterChanges\nfor a period of time"),(0,s.kt)("h4",{id:"arguments-27"},"Arguments"),(0,s.kt)("p",null,"quantity: The filter id."),(0,s.kt)("h4",{id:"returns-29"},"Returns"),(0,s.kt)("p",null,"bool: true if the filter was successfully uninstalled, otherwise false."),(0,s.kt)("h4",{id:"get_filter_changes"},"get","_","filter","_","changes"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_filter_changes(quantity: str) -> List[Array]\n")),(0,s.kt)("p",null,"Polling method for a filter, which returns an array of logs which occurred since last poll"),(0,s.kt)("h4",{id:"arguments-28"},"Arguments"),(0,s.kt)("p",null,"quantity: The filter id."),(0,s.kt)("h4",{id:"returns-listarray"},"Returns ",(0,s.kt)("inlineCode",{parentName:"h4"},"List"),"[Array]"),(0,s.kt)("p",null,"array: Array of log objects, or an empty array if nothing has changed since last poll. For filters created with eth_newBlockFilter the return are block hashes (data, 32 Bytes), e.g. ",'["',"0x3454645634534...",'"]',". For filters created with eth_newPendingTransactionFilter the return are transaction hashes (data, 32 Bytes), e.g. ",'["',"0x6345343454645...",'"]',"."),(0,s.kt)("h4",{id:"get_filter_logs"},"get","_","filter","_","logs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_filter_logs(quantity: str) -> List[Any]\n")),(0,s.kt)("p",null,"Returns an array of all logs matching filter with given id"),(0,s.kt)("h4",{id:"arguments-29"},"Arguments"),(0,s.kt)("p",null,"quantity: The filter id."),(0,s.kt)("h4",{id:"returns-30"},"Returns"),(0,s.kt)("p",null,"array: See eth_getFilterChanges."),(0,s.kt)("h4",{id:"get_logs"},"get","_","logs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_logs(obj: Obj) -> List[Any]\n")),(0,s.kt)("p",null,"Returns an array of all logs matching a given filter object"),(0,s.kt)("h4",{id:"arguments-30"},"Arguments"),(0,s.kt)("p",null,"obj: The filter options"),(0,s.kt)("h4",{id:"returns-31"},"Returns"),(0,s.kt)("p",null,"array: See eth_getFilterChanges."),(0,s.kt)("h4",{id:"get_work"},"get","_","work"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def get_work() -> List[str]\n")),(0,s.kt)("p",null,"Returns the hash of the current block, the seedHash, and the boundary condition to be met (\u201ctarget\u201d)"),(0,s.kt)("h4",{id:"returns-32"},"Returns"),(0,s.kt)("p",null,"array: Array with the following properties -data, 32 Bytes - current block header pow-hash -data, 32 Bytes - the seed hash used for the DAG. -data, 32 Bytes - the boundary condition (\u201ctarget\u201d), 2^256  difficulty."),(0,s.kt)("h4",{id:"submit_work"},"submit","_","work"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def submit_work(a: str, b: str, c: str) -> bool\n")),(0,s.kt)("p",null,"Used for submitting a proof-of-work solution"),(0,s.kt)("h4",{id:"arguments-31"},"Arguments"),(0,s.kt)("p",null,"a: 8 Bytes - The nonce found (64 bits)\nb: 32 Bytes - The header\u2019s pow-hash (256 bits)\nc: 32 Bytes - The mix digest (256 bits)"),(0,s.kt)("h4",{id:"returns-33"},"Returns"),(0,s.kt)("p",null,"bool: returns true if the provided solution is valid, otherwise false."),(0,s.kt)("h4",{id:"submit_hashrate"},"submit","_","hashrate"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def submit_hashrate(hashrate: str, i_d: str) -> bool\n")),(0,s.kt)("p",null,"Used for submitting mining hashrate"),(0,s.kt)("h4",{id:"arguments-32"},"Arguments"),(0,s.kt)("p",null,"hashrate: A hexadecimal string representation (32 bytes) of the hash rate\nid: String - A random hexadecimal(32 bytes) ID identifying the client"),(0,s.kt)("h4",{id:"returns-34"},"Returns"),(0,s.kt)("p",null,"bool: Returns ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," if submitting went through succesfully and ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," otherwise."))}h.isMDXComponent=!0}}]);
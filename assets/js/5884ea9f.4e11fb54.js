"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[166],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),h=s,b=p["".concat(i,".").concat(h)]||p[h]||d[h]||o;return n?a.createElement(b,r(r({ref:t},u),{},{components:n})):a.createElement(b,r({ref:t},u))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:s,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},134:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var a=n(7462),s=n(3366),o=(n(7294),n(3905)),r=["components"],c={sidebar_label:"txpool",title:"etherdata_sdk.json_rpc.txpool"},i=void 0,l={unversionedId:"python/api/etherdata_sdk/json_rpc/txpool",id:"python/api/etherdata_sdk/json_rpc/txpool",title:"etherdata_sdk.json_rpc.txpool",description:"Transaction Objects",source:"@site/docs/python/api/etherdata_sdk/json_rpc/txpool.md",sourceDirName:"python/api/etherdata_sdk/json_rpc",slug:"/python/api/etherdata_sdk/json_rpc/txpool",permalink:"/etherdata-sdk/docs/python/api/etherdata_sdk/json_rpc/txpool",editUrl:"https://github.com/etherdata-blockchain/etherdata-sdk/docs/docs/python/api/etherdata_sdk/json_rpc/txpool.md",tags:[],version:"current",frontMatter:{sidebar_label:"txpool",title:"etherdata_sdk.json_rpc.txpool"},sidebar:"tutorialSidebar",previous:{title:"real_time",permalink:"/etherdata-sdk/docs/python/api/etherdata_sdk/json_rpc/real_time"},next:{title:"to_dict",permalink:"/etherdata-sdk/docs/python/api/etherdata_sdk/utils/to_dict"}},u=[{value:"Transaction Objects",id:"transaction-objects",children:[{value:"blockHash",id:"blockhash",children:[],level:4},{value:"blockNumber",id:"blocknumber",children:[],level:4},{value:"from_field",id:"from_field",children:[],level:4},{value:"gas",id:"gas",children:[],level:4},{value:"gasPrice",id:"gasprice",children:[],level:4},{value:"hash",id:"hash",children:[],level:4},{value:"input",id:"input",children:[],level:4},{value:"nonce",id:"nonce",children:[],level:4},{value:"to",id:"to",children:[],level:4},{value:"transactionIndex",id:"transactionindex",children:[],level:4},{value:"value",id:"value",children:[],level:4}],level:2},{value:"PendingTransactions Objects",id:"pendingtransactions-objects",children:[{value:"transaction",id:"transaction",children:[],level:4}],level:2},{value:"QueuedTransactions Objects",id:"queuedtransactions-objects",children:[{value:"transaction",id:"transaction-1",children:[],level:4}],level:2},{value:"ContentResponseTransactionObject Objects",id:"contentresponsetransactionobject-objects",children:[{value:"pendingTransactions",id:"pendingtransactions",children:[],level:4},{value:"queuedTransactions",id:"queuedtransactions",children:[],level:4}],level:2},{value:"TransactionArray Objects",id:"transactionarray-objects",children:[{value:"transaction",id:"transaction-2",children:[],level:4}],level:2},{value:"InspectResponseTransactionObject Objects",id:"inspectresponsetransactionobject-objects",children:[{value:"pendingTransactions",id:"pendingtransactions-1",children:[],level:4},{value:"queuedTransactions",id:"queuedtransactions-1",children:[],level:4}],level:2},{value:"StatusResponseStatusObject Objects",id:"statusresponsestatusobject-objects",children:[{value:"pending",id:"pending",children:[],level:4},{value:"queued",id:"queued",children:[],level:4}],level:2},{value:"Txpool Objects",id:"txpool-objects",children:[{value:"content",id:"content",children:[],level:4},{value:"Returns ContentResponseTransactionObject",id:"returns-contentresponsetransactionobject",children:[],level:4},{value:"inspect",id:"inspect",children:[],level:4},{value:"Returns InspectResponseTransactionObject",id:"returns-inspectresponsetransactionobject",children:[],level:4},{value:"status",id:"status",children:[],level:4},{value:"Returns StatusResponseStatusObject",id:"returns-statusresponsestatusobject",children:[],level:4}],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"transaction-objects"},"Transaction Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Transaction()\n")),(0,o.kt)("h4",{id:"blockhash"},"blockHash"),(0,o.kt)("p",null,"The block hash of the transaction"),(0,o.kt)("h4",{id:"blocknumber"},"blockNumber"),(0,o.kt)("p",null,"The block number of the transaction"),(0,o.kt)("h4",{id:"from_field"},"from","_","field"),(0,o.kt)("p",null,"The from value of the transaction"),(0,o.kt)("h4",{id:"gas"},"gas"),(0,o.kt)("p",null,"The gas value of the transaction"),(0,o.kt)("h4",{id:"gasprice"},"gasPrice"),(0,o.kt)("p",null,"The gas price of the transaction"),(0,o.kt)("h4",{id:"hash"},"hash"),(0,o.kt)("p",null,"The hash of the transaction"),(0,o.kt)("h4",{id:"input"},"input"),(0,o.kt)("p",null,"The input of the transaction"),(0,o.kt)("h4",{id:"nonce"},"nonce"),(0,o.kt)("p",null,"The nonce of the transaction"),(0,o.kt)("h4",{id:"to"},"to"),(0,o.kt)("p",null,"The to of the transaction"),(0,o.kt)("h4",{id:"transactionindex"},"transactionIndex"),(0,o.kt)("p",null,"The transaction index"),(0,o.kt)("h4",{id:"value"},"value"),(0,o.kt)("p",null,"The value of the transaction"),(0,o.kt)("h2",{id:"pendingtransactions-objects"},"PendingTransactions Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass PendingTransactions()\n")),(0,o.kt)("h4",{id:"transaction"},"transaction"),(0,o.kt)("p",null,"The object containing different fields"),(0,o.kt)("h2",{id:"queuedtransactions-objects"},"QueuedTransactions Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass QueuedTransactions()\n")),(0,o.kt)("h4",{id:"transaction-1"},"transaction"),(0,o.kt)("p",null,"The object containing different fields"),(0,o.kt)("h2",{id:"contentresponsetransactionobject-objects"},"ContentResponseTransactionObject Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass ContentResponseTransactionObject()\n")),(0,o.kt)("h4",{id:"pendingtransactions"},"pendingTransactions"),(0,o.kt)("p",null,"The array of pending transactions"),(0,o.kt)("h4",{id:"queuedtransactions"},"queuedTransactions"),(0,o.kt)("p",null,"The array of queued transactions"),(0,o.kt)("h2",{id:"transactionarray-objects"},"TransactionArray Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass TransactionArray()\n")),(0,o.kt)("h4",{id:"transaction-2"},"transaction"),(0,o.kt)("p",null,"Each entry maps an origin-address to a batch of scheduled transactions."),(0,o.kt)("h2",{id:"inspectresponsetransactionobject-objects"},"InspectResponseTransactionObject Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass InspectResponseTransactionObject()\n")),(0,o.kt)("h4",{id:"pendingtransactions-1"},"pendingTransactions"),(0,o.kt)("p",null,"The array of pending transactions"),(0,o.kt)("h4",{id:"queuedtransactions-1"},"queuedTransactions"),(0,o.kt)("p",null,"The array of queued transactions"),(0,o.kt)("h2",{id:"statusresponsestatusobject-objects"},"StatusResponseStatusObject Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass StatusResponseStatusObject()\n")),(0,o.kt)("h4",{id:"pending"},"pending"),(0,o.kt)("p",null,"The number of transactions currently pending for inclusion in the next block(s)"),(0,o.kt)("h4",{id:"queued"},"queued"),(0,o.kt)("p",null,"The transaction that is being scheduled for future execution"),(0,o.kt)("h2",{id:"txpool-objects"},"Txpool Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Txpool()\n")),(0,o.kt)("p",null,"The txpool API gives you access to several non-standard RPC methods to inspect the contents of  the transaction pool containing all the currently pending transactions as well as the ones queued  for future processing"),(0,o.kt)("h4",{id:"content"},"content"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def content() -> ContentResponseTransactionObject\n")),(0,o.kt)("p",null,"The content inspection property can be queried to list the exact details of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only"),(0,o.kt)("p",null,"The result is an object with two fields pending and queued\nEach of these fields are associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions\nThese batches themselves are maps associating nonces with actual transactions"),(0,o.kt)("p",null,"Please note, there may be multiple transactions associated with the same account and nonce\nThis can happen if the user broadcast mutliple ones with varying gas allowances (or even complerely different transactions)"),(0,o.kt)("h4",{id:"returns-contentresponsetransactionobject"},"Returns ",(0,o.kt)("a",{parentName:"h4",href:"#contentresponsetransactionobject-objects"},(0,o.kt)("inlineCode",{parentName:"a"},"ContentResponseTransactionObject"))),(0,o.kt)("p",null,"transactionObject: The return transaction object"),(0,o.kt)("h4",{id:"inspect"},"inspect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def inspect() -> InspectResponseTransactionObject\n")),(0,o.kt)("p",null,"The inspect inspection property can be queried to list a textual summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only\nThis is a method specifically tailored to developers to quickly see the transactions in the pool and find any potential issues"),(0,o.kt)("p",null,"The result is an object with two fields pending and queued\nEach of these fields are associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions\nThese batches themselves are maps associating nonces with transactions summary strings"),(0,o.kt)("p",null,"Please note, there may be multiple transactions associated with the same account and nonce\nThis can happen if the user broadcast mutliple ones with varying gas allowances (or even complerely different transactions)"),(0,o.kt)("h4",{id:"returns-inspectresponsetransactionobject"},"Returns ",(0,o.kt)("a",{parentName:"h4",href:"#inspectresponsetransactionobject-objects"},(0,o.kt)("inlineCode",{parentName:"a"},"InspectResponseTransactionObject"))),(0,o.kt)("p",null,"transactionObject: the return transcation object"),(0,o.kt)("h4",{id:"status"},"status"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def status() -> StatusResponseStatusObject\n")),(0,o.kt)("p",null,"The status inspection property can be queried for the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only"),(0,o.kt)("p",null,"The result is an object with two fields pending and queued, each of which is a counter representing the number of transactions in that particular state"),(0,o.kt)("h4",{id:"returns-statusresponsestatusobject"},"Returns ",(0,o.kt)("a",{parentName:"h4",href:"#statusresponsestatusobject-objects"},(0,o.kt)("inlineCode",{parentName:"a"},"StatusResponseStatusObject"))),(0,o.kt)("p",null,"statusObject: An object containing transaction status"))}p.isMDXComponent=!0}}]);
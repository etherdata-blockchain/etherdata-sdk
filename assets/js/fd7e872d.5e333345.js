"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[360],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),s=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},u=function(t){var e=s(t.components);return n.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),p=s(r),f=a,v=p["".concat(l,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(v,i(i({ref:e},u),{},{components:r})):n.createElement(v,i({ref:e},u))}));function f(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,i=new Array(o);i[0]=p;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:a,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5262:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],c={sidebar_label:"to_dict",title:"etherdata_sdk.utils.to_dict"},l=void 0,s={unversionedId:"python/api/etherdata_sdk/utils/to_dict",id:"python/api/etherdata_sdk/utils/to_dict",title:"etherdata_sdk.utils.to_dict",description:"to\\_dict",source:"@site/docs/python/api/etherdata_sdk/utils/to_dict.md",sourceDirName:"python/api/etherdata_sdk/utils",slug:"/python/api/etherdata_sdk/utils/to_dict",permalink:"/docs/python/api/etherdata_sdk/utils/to_dict",editUrl:"https://github.com/etherdata-blockchain/etherdata-sdk/docs/docs/python/api/etherdata_sdk/utils/to_dict.md",tags:[],version:"current",frontMatter:{sidebar_label:"to_dict",title:"etherdata_sdk.utils.to_dict"},sidebar:"tutorialSidebar",previous:{title:"txpool",permalink:"/docs/python/api/etherdata_sdk/json_rpc/txpool"},next:{title:"Introduction",permalink:"/docs/typescript/intro"}},u=[{value:"to_dict",id:"to_dict",children:[],level:4},{value:"convert_dataclass",id:"convert_dataclass",children:[],level:4},{value:"Arguments",id:"arguments",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4}],d={toc:u};function p(t){var e=t.components,r=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"to_dict"},"to","_","dict"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def to_dict(data: Dict) -> Dict[str, Any]\n")),(0,o.kt)("p",null,"Given a dictionary with python data class as its value,\nconvert it to json format"),(0,o.kt)("h4",{id:"convert_dataclass"},"convert","_","dataclass"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def convert_dataclass(value) -> Union[Dict, int, float, bool, str, List]\n")),(0,o.kt)("p",null,"Helper class. Recursively convert value into json format"),(0,o.kt)("h4",{id:"arguments"},"Arguments"),(0,o.kt)("p",null,"value: Any value"),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,"value: Converted value"))}p.isMDXComponent=!0}}]);
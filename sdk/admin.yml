title: "admin"
description: "The admin API gives you access to several non-standard RPC methods, 
which will allow you to have a fine grained control over your Getd instance, 
including but not limited to network peer and RPC endpoint management."

functions:
    - name: addPeer
      description: The addPeer administrative method requests adding a new remote node to the list of 
                    tracked static nodes. The node will try to maintain connectivity to these nodes at 
                    all times, reconnecting every once in a while if the remote connection goes down. 
                    The method accepts a single argument, the enode URL of the remote peer to start tracking 
                    and returns a BOOL indicating whether the peer was accepted for tracking or some error 
                    occurred.
      rpc_method: admin_addPeer
      params:
        - name: enode
          description: The enode URL of the remote peer to start tracking
          type: string
          optional: false
          example: "enode://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@52.16.188.185:30303"

      returns:
        - type: boolean
          name: accepted
          description: Indicating whether the peer was accepted for tracking or some error occurred.
          example: "true"


    - name: datadir
      description: The datadir administrative property can be queried for the absolute path the running
                    Getd node currently uses to store all its databases.
      rpc_method: admin_datadir
      params: []
      returns:
        - type: string
          name: absPath
          description: The absolute path that the running Getd node is currently using to store 
                       all its databases
          example: "/home/john/.etherdata-blockchain"


    - name: nodeInfo
      description: The nodeInfo administrative property can be queried for all the information known 
                   about the running Getd node at the networking granularity. These include general 
                   information about the node itself as a participant of the ÐΞVp2p P2P overlay protocol, 
                   as well as specialized information added by each of the running application 
                   protocols (e.g. etd, les, shh, bzz).
      rpc_method: admin_nodeInfo
      params: []
      returns:
        - type: object 
          name: nodeInfo
          example: ""
          objectType:
            - name: enode
              description: The enode
              type: string
              example: "enode://44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d@[::]:30303"
            - name: id
              description: The id of the node
              type: string
              example: "44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d"
            - name: ip
              description: The ip of the node
              type: string
              example: "::"
            - name: listenAddr
              description: The listen address of the node
              example: "[::]:30303"
              type: string
            - name: ports
              description: The Object if the port
              example: ""
              type: object
              objectType:
                - name: discovery
                  description: The discovery of the port
                  example: "30303"
                  type: number
                - name: listener
                  description: The listener of the port
                  example: "30303"
                  type: number
          description: Get all the information known about the running Getd node at the networking granularity


    - name: peers
      description: The peers administrative property can be queried for all the information known about 
                   the connected remote nodes at the networking granularity. These include general 
                   information about the nodes themselves as participants of the ÐΞVp2p P2P overlay protocol, 
                   as well as specialized information added by each of the running application 
                   protocols (e.g. etd, les, shh, bzz).
      rpc_method: admin_peers
      params: []
      returns:        
        - type: array
          name: peersArray
          description: All the information known about the connected remote nodes
          example: ""
          arrayType: object
          objectType:
            - name: caps
              type: array
              arrayType: string
              description: The caps of each peer
              example: '["etd/61", "etd/62", "etd/63"]'
            - name: id
              description: The id of each peer
              example: "08a6b39263470c78d3e4f58e3c997cd2e7af623afce64656cfc56480babcea7a9138f3d09d7b9879344c2d2e457679e3655d4b56eaff5fd4fd7f147bdb045124"
              type: string
            - name: name
              description: The name of each peer
              example: "Getd/v1.5.0-unstable/linux/go1.5.1"
              type: string
            - name: network
              description: The network environment of each peer 
              example: ""
              type: object
              objectType:
                - name: localAddress
                  description: The local address of each peer
                  example: "192.168.0.104:51068"
                  type: string
                - name: remoteAddress
                  description: The remote address of each peer
                  example: "71.62.31.72:30303"
                  type: string
            - name: protocols
              description: The protocol(s) used by each peer
              example: ""
              type: array
              arrayType: object
              objectType:
                - name: etd
                  description: The details of ETD protocal
                  example: ""
                  type: object
                  objectType:
                    - name: difficulty
                      description: The difficulty of the protocal
                      example: "17334052235346465000"
                      type: number
                    - name: head
                      description: The head of the protocal 
                      example: "5794b768dae6c6ee5366e6ca7662bdff2882576e09609bf778633e470e0e7852"
                      type: string
                    - name: version
                      description: The version of the protocal 
                      example: "63"
                      type: number
              
    
    - name: startRPC
      description: The startRPC administrative method starts an HTTP based JSON RPC API webserver to 
                   handle client requests. All the parameters are optional.
      rpc_method: admin_startRPC
      params:
        - name: host
          type: string
          description: Network interface to open the listener socket on (defaults to "localhost")
          optional: true
          example: "127.0.0.1"
        - name: port
          type: number
          optional: true
          example: "8545"
          description: Network port to open the listener socket on (defaults to 8545)
        - name: cors
          type: string
          optional: true
          example: ""
          description: cross-origin resource sharing header to use (defaults to "")
        - name: apis
          description: API modules to offer over this interface (defaults to "etd,net,web3")
          example: "etd,net,web3"
          type: string
          optional: true
      returns:
        - name: HTTPlistenerOpen
          description: A boolean flag specifying whether the HTTP RPC listener was opened or not. Please note, only one HTTP endpoint is allowed to be active at any time.
          example: "true"
          type: boolean


    - name: startWS
      description: The startWS administrative method starts an WebSocket based JSON RPC API webserver to handle client requests. All the parameters are optional
      rpc_method: admin_startRPC
      params:
       - name: host
         description: Network interface to open the listener socket on (defaults to "localhost")
         example: "127.0.0.1"
         type: string
         optional: true
       - name: port
         description: Network port to open the listener socket on (defaults to 8546)
         example: "8546"
         type: number
         optional: true
       - name: cors
         description: cross-origin resource sharing header to use (defaults to "")
         example: ""
         type: string
         optional: true
       - name: apis
         description: API modules to offer over this interface (defaults to "etd,net,web3")
         example: "etd,net,web3"
         type: string
         optional: true
      returns:
        - name: WEBlistenerOpen
          description: A boolean flag specifying whether the WebSocket RPC listener was opened or not. Please note, only one WebSocket endpoint is allowed to be active at any time.
          example: "true"
          type: boolean


    - name: stopRPC
      description: The stopRPC administrative method closes the currently open HTTP RPC endpoint. As the node can only have a single HTTP endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.
      rpc_method: admin_stopRPC
      params: []
      returns:
        - name: HTTPendpointClosed
          description: A boolean indicating whether the endpoint was closed or not.
          example: "true"
          type: boolean

    - name: stopWS
      description: The stopWS administrative method closes the currently open WebSocket RPC endpoint. As the node can only have a single WebSocket endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.
      rpc_method: admin_stopWS
      params: []
      returns:
        - name: WEBendpointClosed
          description: A boolean indicating whether the endpoint was closed or not.
          example: "true"
          type: boolean


      



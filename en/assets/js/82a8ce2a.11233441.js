"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[809],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),i=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=i(n),u=o,k=h["".concat(d,".").concat(u)]||h[u]||p[u]||a;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=h;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var i=2;i<a;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6196:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return i},toc:function(){return c},default:function(){return h}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],s={sidebar_label:"admin",title:"etherdata_sdk.json_rpc.admin"},d=void 0,i={unversionedId:"python/api/etherdata_sdk/json_rpc/admin",id:"python/api/etherdata_sdk/json_rpc/admin",title:"etherdata_sdk.json_rpc.admin",description:"NodeInfoResponsePorts Objects",source:"@site/docs/python/api/etherdata_sdk/json_rpc/admin.md",sourceDirName:"python/api/etherdata_sdk/json_rpc",slug:"/python/api/etherdata_sdk/json_rpc/admin",permalink:"/etherdata-sdk/en/docs/python/api/etherdata_sdk/json_rpc/admin",editUrl:"https://github.com/etherdata-blockchain/etherdata-sdk/docs/docs/python/api/etherdata_sdk/json_rpc/admin.md",tags:[],version:"current",frontMatter:{sidebar_label:"admin",title:"etherdata_sdk.json_rpc.admin"},sidebar:"tutorialSidebar",previous:{title:"json_rpc",permalink:"/etherdata-sdk/en/docs/python/api/etherdata_sdk/json_rpc/"},next:{title:"clique",permalink:"/etherdata-sdk/en/docs/python/api/etherdata_sdk/json_rpc/clique"}},c=[{value:"NodeInfoResponsePorts Objects",id:"nodeinforesponseports-objects",children:[{value:"discovery",id:"discovery",children:[],level:4},{value:"listener",id:"listener",children:[],level:4}],level:2},{value:"NodeInfoResponseNodeInfo Objects",id:"nodeinforesponsenodeinfo-objects",children:[{value:"enode",id:"enode",children:[],level:4},{value:"id",id:"id",children:[],level:4},{value:"ip",id:"ip",children:[],level:4},{value:"listenAddr",id:"listenaddr",children:[],level:4},{value:"ports",id:"ports",children:[],level:4}],level:2},{value:"Network Objects",id:"network-objects",children:[{value:"localAddress",id:"localaddress",children:[],level:4},{value:"remoteAddress",id:"remoteaddress",children:[],level:4}],level:2},{value:"Etd Objects",id:"etd-objects",children:[{value:"difficulty",id:"difficulty",children:[],level:4},{value:"head",id:"head",children:[],level:4},{value:"version",id:"version",children:[],level:4}],level:2},{value:"Protocols Objects",id:"protocols-objects",children:[{value:"etd",id:"etd",children:[],level:4}],level:2},{value:"PeersArray Objects",id:"peersarray-objects",children:[{value:"caps",id:"caps",children:[],level:4},{value:"id",id:"id-1",children:[],level:4},{value:"name",id:"name",children:[],level:4},{value:"network",id:"network",children:[],level:4},{value:"protocols",id:"protocols",children:[],level:4}],level:2},{value:"Admin Objects",id:"admin-objects",children:[{value:"add_peer",id:"add_peer",children:[],level:4},{value:"Arguments",id:"arguments",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"datadir",id:"datadir",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"node_info",id:"node_info",children:[],level:4},{value:"Returns NodeInfoResponseNodeInfo",id:"returns-nodeinforesponsenodeinfo",children:[],level:4},{value:"peers",id:"peers",children:[],level:4},{value:"Returns <code>List</code>PeersArray",id:"returns-listpeersarray",children:[],level:4},{value:"start_r_p_c",id:"start_r_p_c",children:[],level:4},{value:"Arguments",id:"arguments-1",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"start_w_s",id:"start_w_s",children:[],level:4},{value:"Arguments",id:"arguments-2",children:[],level:4},{value:"Returns",id:"returns-3",children:[],level:4},{value:"stop_r_p_c",id:"stop_r_p_c",children:[],level:4},{value:"Returns",id:"returns-4",children:[],level:4},{value:"stop_w_s",id:"stop_w_s",children:[],level:4},{value:"Returns",id:"returns-5",children:[],level:4}],level:2}],p={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"nodeinforesponseports-objects"},"NodeInfoResponsePorts Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass NodeInfoResponsePorts()\n")),(0,a.kt)("h4",{id:"discovery"},"discovery"),(0,a.kt)("p",null,"The discovery of the port"),(0,a.kt)("h4",{id:"listener"},"listener"),(0,a.kt)("p",null,"The listener of the port"),(0,a.kt)("h2",{id:"nodeinforesponsenodeinfo-objects"},"NodeInfoResponseNodeInfo Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass NodeInfoResponseNodeInfo()\n")),(0,a.kt)("h4",{id:"enode"},"enode"),(0,a.kt)("p",null,"The enode"),(0,a.kt)("h4",{id:"id"},"id"),(0,a.kt)("p",null,"The id of the node"),(0,a.kt)("h4",{id:"ip"},"ip"),(0,a.kt)("p",null,"The ip of the node"),(0,a.kt)("h4",{id:"listenaddr"},"listenAddr"),(0,a.kt)("p",null,"The listen address of the node"),(0,a.kt)("h4",{id:"ports"},"ports"),(0,a.kt)("p",null,"The Object if the port"),(0,a.kt)("h2",{id:"network-objects"},"Network Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Network()\n")),(0,a.kt)("h4",{id:"localaddress"},"localAddress"),(0,a.kt)("p",null,"The local address of each peer"),(0,a.kt)("h4",{id:"remoteaddress"},"remoteAddress"),(0,a.kt)("p",null,"The remote address of each peer"),(0,a.kt)("h2",{id:"etd-objects"},"Etd Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Etd()\n")),(0,a.kt)("h4",{id:"difficulty"},"difficulty"),(0,a.kt)("p",null,"The difficulty of the protocal"),(0,a.kt)("h4",{id:"head"},"head"),(0,a.kt)("p",null,"The head of the protocal"),(0,a.kt)("h4",{id:"version"},"version"),(0,a.kt)("p",null,"The version of the protocal"),(0,a.kt)("h2",{id:"protocols-objects"},"Protocols Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Protocols()\n")),(0,a.kt)("h4",{id:"etd"},"etd"),(0,a.kt)("p",null,"The details of ETD protocal"),(0,a.kt)("h2",{id:"peersarray-objects"},"PeersArray Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass PeersArray()\n")),(0,a.kt)("h4",{id:"caps"},"caps"),(0,a.kt)("p",null,"The caps of each peer"),(0,a.kt)("h4",{id:"id-1"},"id"),(0,a.kt)("p",null,"The id of each peer"),(0,a.kt)("h4",{id:"name"},"name"),(0,a.kt)("p",null,"The name of each peer"),(0,a.kt)("h4",{id:"network"},"network"),(0,a.kt)("p",null,"The network environment of each peer"),(0,a.kt)("h4",{id:"protocols"},"protocols"),(0,a.kt)("p",null,"The protocol(s) used by each peer"),(0,a.kt)("h2",{id:"admin-objects"},"Admin Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Admin()\n")),(0,a.kt)("p",null,"The admin API gives you access to several non-standard RPC methods,  which will allow you to have a fine grained control over your Getd instance,  including but not limited to network peer and RPC endpoint management"),(0,a.kt)("h4",{id:"add_peer"},"add","_","peer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def add_peer(enode: str) -> bool\n")),(0,a.kt)("p",null,"The addPeer administrative method requests adding a new remote node to the list of tracked static nodes\nThe node will try to maintain connectivity to these nodes at all times, reconnecting every once in a while if the remote connection goes down\nThe method accepts a single argument, the enode URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred"),(0,a.kt)("h4",{id:"arguments"},"Arguments"),(0,a.kt)("p",null,"enode: The enode URL of the remote peer to start tracking"),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,"accepted: Indicating whether the peer was accepted for tracking or some error occurred."),(0,a.kt)("h4",{id:"datadir"},"datadir"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def datadir() -> str\n")),(0,a.kt)("p",null,"The datadir administrative property can be queried for the absolute path the running Getd node currently uses to store all its databases"),(0,a.kt)("h4",{id:"returns-1"},"Returns"),(0,a.kt)("p",null,"absPath: The absolute path that the running Getd node is currently using to store all its databases"),(0,a.kt)("h4",{id:"node_info"},"node","_","info"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def node_info() -> NodeInfoResponseNodeInfo\n")),(0,a.kt)("p",null,"The nodeInfo administrative property can be queried for all the information known about the running Getd node at the networking granularity\nThese include general information about the node itself as a participant of the \xd0\u039eVp2p P2P overlay protocol, as well as specialized information added by each of the running application protocols (e\ng\netd, les, shh, bzz)"),(0,a.kt)("h4",{id:"returns-nodeinforesponsenodeinfo"},"Returns ",(0,a.kt)("a",{parentName:"h4",href:"#nodeinforesponsenodeinfo-objects"},(0,a.kt)("inlineCode",{parentName:"a"},"NodeInfoResponseNodeInfo"))),(0,a.kt)("p",null,"nodeInfo: Get all the information known about the running Getd node at the networking granularity"),(0,a.kt)("h4",{id:"peers"},"peers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def peers() -> List[PeersArray]\n")),(0,a.kt)("p",null,"The peers administrative property can be queried for all the information known about the connected remote nodes at the networking granularity\nThese include general information about the nodes themselves as participants of the \xd0\u039eVp2p P2P overlay protocol, as well as specialized information added by each of the running application protocols (e\ng\netd, les, shh, bzz)"),(0,a.kt)("h4",{id:"returns-listpeersarray"},"Returns ",(0,a.kt)("inlineCode",{parentName:"h4"},"List"),"[PeersArray]"),(0,a.kt)("p",null,"peersArray: All the information known about the connected remote nodes"),(0,a.kt)("h4",{id:"start_r_p_c"},"start","_","r","_","p","_","c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def start_r_p_c(host: Optional[str], port: Optional[float],\n                cors: Optional[str], apis: Optional[str]) -> bool\n")),(0,a.kt)("p",null,"The startRPC administrative method starts an HTTP based JSON RPC API webserver to handle client requests\nAll the parameters are optional"),(0,a.kt)("h4",{id:"arguments-1"},"Arguments"),(0,a.kt)("p",null,"host: Network interface to open the listener socket on (defaults to ",'"',"localhost",'"',")\nport: Network port to open the listener socket on (defaults to 8545)\ncors: cross-origin resource sharing header to use (defaults to ",'"','"',")\napis: API modules to offer over this interface (defaults to ",'"',"etd,net,web3",'"',")"),(0,a.kt)("h4",{id:"returns-2"},"Returns"),(0,a.kt)("p",null,"hTTPlistenerOpen: A boolean flag specifying whether the HTTP RPC listener was opened or not. Please note, only one HTTP endpoint is allowed to be active at any time."),(0,a.kt)("h4",{id:"start_w_s"},"start","_","w","_","s"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def start_w_s(host: Optional[str], port: Optional[float], cors: Optional[str],\n              apis: Optional[str]) -> bool\n")),(0,a.kt)("p",null,"The startWS administrative method starts an WebSocket based JSON RPC API webserver to handle client requests\nAll the parameters are optional"),(0,a.kt)("h4",{id:"arguments-2"},"Arguments"),(0,a.kt)("p",null,"host: Network interface to open the listener socket on (defaults to ",'"',"localhost",'"',")\nport: Network port to open the listener socket on (defaults to 8546)\ncors: cross-origin resource sharing header to use (defaults to ",'"','"',")\napis: API modules to offer over this interface (defaults to ",'"',"etd,net,web3",'"',")"),(0,a.kt)("h4",{id:"returns-3"},"Returns"),(0,a.kt)("p",null,"wEBlistenerOpen: A boolean flag specifying whether the WebSocket RPC listener was opened or not. Please note, only one WebSocket endpoint is allowed to be active at any time."),(0,a.kt)("h4",{id:"stop_r_p_c"},"stop","_","r","_","p","_","c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def stop_r_p_c() -> bool\n")),(0,a.kt)("p",null,"The stopRPC administrative method closes the currently open HTTP RPC endpoint\nAs the node can only have a single HTTP endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not"),(0,a.kt)("h4",{id:"returns-4"},"Returns"),(0,a.kt)("p",null,"hTTPendpointClosed: A boolean indicating whether the endpoint was closed or not."),(0,a.kt)("h4",{id:"stop_w_s"},"stop","_","w","_","s"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def stop_w_s() -> bool\n")),(0,a.kt)("p",null,"The stopWS administrative method closes the currently open WebSocket RPC endpoint\nAs the node can only have a single WebSocket endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not"),(0,a.kt)("h4",{id:"returns-5"},"Returns"),(0,a.kt)("p",null,"wEBendpointClosed: A boolean indicating whether the endpoint was closed or not."))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[162],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=i(a),h=r,k=p["".concat(c,".").concat(h)]||p[h]||u[h]||l;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var i=2;i<l;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},6024:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return d},default:function(){return p}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],s={sidebar_label:"debug",title:"etherdata_sdk.json_rpc.debug"},c=void 0,i={unversionedId:"python/api/etherdata_sdk/json_rpc/debug",id:"python/api/etherdata_sdk/json_rpc/debug",title:"etherdata_sdk.json_rpc.debug",description:"Accounts Objects",source:"@site/docs/python/api/etherdata_sdk/json_rpc/debug.md",sourceDirName:"python/api/etherdata_sdk/json_rpc",slug:"/python/api/etherdata_sdk/json_rpc/debug",permalink:"/etherdata-sdk/en/docs/python/api/etherdata_sdk/json_rpc/debug",editUrl:"https://github.com/etherdata-blockchain/etherdata-sdk/docs/docs/python/api/etherdata_sdk/json_rpc/debug.md",tags:[],version:"current",frontMatter:{sidebar_label:"debug",title:"etherdata_sdk.json_rpc.debug"},sidebar:"tutorialSidebar",previous:{title:"clique",permalink:"/etherdata-sdk/en/docs/python/api/etherdata_sdk/json_rpc/clique"},next:{title:"etd",permalink:"/etherdata-sdk/en/docs/python/api/etherdata_sdk/json_rpc/etd"}},d=[{value:"Accounts Objects",id:"accounts-objects",children:[{value:"balance",id:"balance",children:[],level:4},{value:"code",id:"code",children:[],level:4},{value:"codeHash",id:"codehash",children:[],level:4},{value:"nonce",id:"nonce",children:[],level:4},{value:"root",id:"root",children:[],level:4},{value:"storage",id:"storage",children:[],level:4}],level:2},{value:"DumpBlockResponseBlockDetails Objects",id:"dumpblockresponseblockdetails-objects",children:[{value:"accounts",id:"accounts",children:[],level:4},{value:"root",id:"root-1",children:[],level:4}],level:2},{value:"Storage Objects",id:"storage-objects",children:[{value:"storageName",id:"storagename",children:[],level:4}],level:2},{value:"StrucrtLogs Objects",id:"strucrtlogs-objects",children:[{value:"depth",id:"depth",children:[],level:4},{value:"error",id:"error",children:[],level:4},{value:"gas",id:"gas",children:[],level:4},{value:"gasCost",id:"gascost",children:[],level:4},{value:"memory",id:"memory",children:[],level:4},{value:"op",id:"op",children:[],level:4},{value:"pc",id:"pc",children:[],level:4},{value:"stackArray",id:"stackarray",children:[],level:4},{value:"storage",id:"storage-1",children:[],level:4}],level:2},{value:"TraceBlockResponseBlcok Objects",id:"traceblockresponseblcok-objects",children:[{value:"gas",id:"gas-1",children:[],level:4},{value:"returnValue",id:"returnvalue",children:[],level:4},{value:"strucrtLogs",id:"strucrtlogs",children:[],level:4}],level:2},{value:"TraceTransactionResponseTransaction Objects",id:"tracetransactionresponsetransaction-objects",children:[{value:"gas",id:"gas-2",children:[],level:4},{value:"returnValue",id:"returnvalue-1",children:[],level:4},{value:"strucrtLogs",id:"strucrtlogs-1",children:[],level:4}],level:2},{value:"Debug Objects",id:"debug-objects",children:[{value:"backtrace_at",id:"backtrace_at",children:[],level:4},{value:"Arguments",id:"arguments",children:[],level:4},{value:"block_profile",id:"block_profile",children:[],level:4},{value:"cpu_profile",id:"cpu_profile",children:[],level:4},{value:"dump_block",id:"dump_block",children:[],level:4},{value:"Arguments",id:"arguments-1",children:[],level:4},{value:"Returns DumpBlockResponseBlockDetails",id:"returns-dumpblockresponseblockdetails",children:[],level:4},{value:"gc_stats",id:"gc_stats",children:[],level:4},{value:"get_block_rlp",id:"get_block_rlp",children:[],level:4},{value:"go_trace",id:"go_trace",children:[],level:4},{value:"mem_stats",id:"mem_stats",children:[],level:4},{value:"seed_hash",id:"seed_hash",children:[],level:4},{value:"set_head",id:"set_head",children:[],level:4},{value:"set_block_profile_rate",id:"set_block_profile_rate",children:[],level:4},{value:"Arguments",id:"arguments-2",children:[],level:4},{value:"stacks",id:"stacks",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"start_c_p_u_profile",id:"start_c_p_u_profile",children:[],level:4},{value:"start_go_trace",id:"start_go_trace",children:[],level:4},{value:"stop_c_p_u_profile",id:"stop_c_p_u_profile",children:[],level:4},{value:"stop_go_trace",id:"stop_go_trace",children:[],level:4},{value:"trace_block",id:"trace_block",children:[],level:4},{value:"Arguments",id:"arguments-3",children:[],level:4},{value:"Returns TraceBlockResponseBlcok",id:"returns-traceblockresponseblcok",children:[],level:4},{value:"trace_block_by_number",id:"trace_block_by_number",children:[],level:4},{value:"Arguments",id:"arguments-4",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"trace_block_by_hash",id:"trace_block_by_hash",children:[],level:4},{value:"Arguments",id:"arguments-5",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"trace_block_from_file",id:"trace_block_from_file",children:[],level:4},{value:"Arguments",id:"arguments-6",children:[],level:4},{value:"Returns",id:"returns-3",children:[],level:4},{value:"standard_trace_block_to_file",id:"standard_trace_block_to_file",children:[],level:4},{value:"Arguments",id:"arguments-7",children:[],level:4},{value:"Returns",id:"returns-4",children:[],level:4},{value:"standard_trace_bad_block_to_file",id:"standard_trace_bad_block_to_file",children:[],level:4},{value:"trace_transaction",id:"trace_transaction",children:[],level:4},{value:"Arguments",id:"arguments-8",children:[],level:4},{value:"Returns TraceTransactionResponseTransaction",id:"returns-tracetransactionresponsetransaction",children:[],level:4},{value:"java_script_based_tracing",id:"java_script_based_tracing",children:[],level:4},{value:"trace_call",id:"trace_call",children:[],level:4},{value:"Arguments",id:"arguments-9",children:[],level:4},{value:"Returns",id:"returns-5",children:[],level:4},{value:"verbosity",id:"verbosity",children:[],level:4},{value:"Returns",id:"returns-6",children:[],level:4},{value:"vmodule",id:"vmodule",children:[],level:4},{value:"Arguments",id:"arguments-10",children:[],level:4},{value:"Returns",id:"returns-7",children:[],level:4},{value:"write_block_profile",id:"write_block_profile",children:[],level:4},{value:"write_mem_profile",id:"write_mem_profile",children:[],level:4}],level:2}],u={toc:d};function p(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"accounts-objects"},"Accounts Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Accounts()\n")),(0,l.kt)("h4",{id:"balance"},"balance"),(0,l.kt)("p",null,"The balance of the account"),(0,l.kt)("h4",{id:"code"},"code"),(0,l.kt)("p",null,"The code of the account"),(0,l.kt)("h4",{id:"codehash"},"codeHash"),(0,l.kt)("p",null,"The code hash of the account"),(0,l.kt)("h4",{id:"nonce"},"nonce"),(0,l.kt)("p",null,"The nonce of the account"),(0,l.kt)("h4",{id:"root"},"root"),(0,l.kt)("p",null,"The root of the account"),(0,l.kt)("h4",{id:"storage"},"storage"),(0,l.kt)("p",null,"The storage of the account"),(0,l.kt)("h2",{id:"dumpblockresponseblockdetails-objects"},"DumpBlockResponseBlockDetails Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass DumpBlockResponseBlockDetails()\n")),(0,l.kt)("h4",{id:"accounts"},"accounts"),(0,l.kt)("p",null,"The list accounts"),(0,l.kt)("h4",{id:"root-1"},"root"),(0,l.kt)("p",null,"The root of the block"),(0,l.kt)("h2",{id:"storage-objects"},"Storage Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass Storage()\n")),(0,l.kt)("h4",{id:"storagename"},"storageName"),(0,l.kt)("p",null,"The storage address"),(0,l.kt)("h2",{id:"strucrtlogs-objects"},"StrucrtLogs Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass StrucrtLogs()\n")),(0,l.kt)("h4",{id:"depth"},"depth"),(0,l.kt)("p",null,"The depth of transcation"),(0,l.kt)("h4",{id:"error"},"error"),(0,l.kt)("p",null,"Shows error message(s) (if any)"),(0,l.kt)("h4",{id:"gas"},"gas"),(0,l.kt)("p",null,"The gas of the transaction"),(0,l.kt)("h4",{id:"gascost"},"gasCost"),(0,l.kt)("p",null,"The gas cost"),(0,l.kt)("h4",{id:"memory"},"memory"),(0,l.kt)("p",null,"Memory list of the transaction"),(0,l.kt)("h4",{id:"op"},"op"),(0,l.kt)("p",null,"The op command"),(0,l.kt)("h4",{id:"pc"},"pc"),(0,l.kt)("p",null,"The pc"),(0,l.kt)("h4",{id:"stackarray"},"stackArray"),(0,l.kt)("p",null,"The stack array"),(0,l.kt)("h4",{id:"storage-1"},"storage"),(0,l.kt)("p",null,"The storage of the block"),(0,l.kt)("h2",{id:"traceblockresponseblcok-objects"},"TraceBlockResponseBlcok Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass TraceBlockResponseBlcok()\n")),(0,l.kt)("h4",{id:"gas-1"},"gas"),(0,l.kt)("p",null,"The gas value"),(0,l.kt)("h4",{id:"returnvalue"},"returnValue"),(0,l.kt)("p",null,"The return value"),(0,l.kt)("h4",{id:"strucrtlogs"},"strucrtLogs"),(0,l.kt)("p",null,"The transaction logs"),(0,l.kt)("h2",{id:"tracetransactionresponsetransaction-objects"},"TraceTransactionResponseTransaction Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass\nclass TraceTransactionResponseTransaction()\n")),(0,l.kt)("h4",{id:"gas-2"},"gas"),(0,l.kt)("p",null,"The gas value"),(0,l.kt)("h4",{id:"returnvalue-1"},"returnValue"),(0,l.kt)("p",null,"The return value"),(0,l.kt)("h4",{id:"strucrtlogs-1"},"strucrtLogs"),(0,l.kt)("p",null,"The transaction logs"),(0,l.kt)("h2",{id:"debug-objects"},"Debug Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Debug()\n")),(0,l.kt)("p",null,"The debug API gives you access to several non-standard RPC methods, which will allow you to inspect, debug and set certain debugging flags during runtime"),(0,l.kt)("h4",{id:"backtrace_at"},"backtrace","_","at"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def backtrace_at(location_javascript_based: any) -> None\n")),(0,l.kt)("p",null,"Sets the logging backtrace location\nWhen a backtrace location is set and a log message is emitted at that location, the stack of the goroutine executing the log statement will be printed to stderr\nThe location is specified as ","<","filename",">",":","<","line",">"),(0,l.kt)("h4",{id:"arguments"},"Arguments"),(0,l.kt)("p",null,"locationJavascript_based: The logging backtrace location, which is specified as ","<","filename",">",":","<","line",">","."),(0,l.kt)("h4",{id:"block_profile"},"block","_","profile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def block_profile() -> None\n")),(0,l.kt)("p",null,"Turns on block profiling for the given duration and writes profile data to disk\nIt uses a profile rate of 1 for most accurate information\nIf a different rate is desired, set the rate and write the profile manually using debug_writeBlockProfile"),(0,l.kt)("h4",{id:"cpu_profile"},"cpu","_","profile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def cpu_profile() -> None\n")),(0,l.kt)("p",null,"Turns on CPU profiling for the given duration and writes profile data to disk"),(0,l.kt)("h4",{id:"dump_block"},"dump","_","block"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def dump_block(block_num: float) -> DumpBlockResponseBlockDetails\n")),(0,l.kt)("p",null,"Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code)"),(0,l.kt)("h4",{id:"arguments-1"},"Arguments"),(0,l.kt)("p",null,"blockNum: The block number"),(0,l.kt)("h4",{id:"returns-dumpblockresponseblockdetails"},"Returns ",(0,l.kt)("a",{parentName:"h4",href:"#dumpblockresponseblockdetails-objects"},(0,l.kt)("inlineCode",{parentName:"a"},"DumpBlockResponseBlockDetails"))),(0,l.kt)("p",null,"blockDetails: The block number and list of accounts"),(0,l.kt)("h4",{id:"gc_stats"},"gc","_","stats"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def gc_stats() -> None\n")),(0,l.kt)("p",null,"Returns GC statistics\nSee https://golang\norg/pkg/runtime/debug/",(0,l.kt)("inlineCode",{parentName:"p"},"GCStats")," for information about the fields of the returned object"),(0,l.kt)("h4",{id:"get_block_rlp"},"get","_","block","_","rlp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_block_rlp() -> None\n")),(0,l.kt)("p",null,"Retrieves and returns the RLP encoded block by number\nReferences -",">"," RLP"),(0,l.kt)("h4",{id:"go_trace"},"go","_","trace"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def go_trace() -> None\n")),(0,l.kt)("p",null,"Turns on Go runtime tracing for the given duration and writes trace data to disk"),(0,l.kt)("h4",{id:"mem_stats"},"mem","_","stats"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def mem_stats() -> None\n")),(0,l.kt)("p",null,"Returns detailed runtime memory statistics\nSee https://golang\norg/pkg/runtime/",(0,l.kt)("inlineCode",{parentName:"p"},"MemStats")," for information about the fields of the returned object"),(0,l.kt)("h4",{id:"seed_hash"},"seed","_","hash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def seed_hash() -> None\n")),(0,l.kt)("p",null,"Fetches and retrieves the seed hash of the block by number"),(0,l.kt)("h4",{id:"set_head"},"set","_","head"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def set_head() -> None\n")),(0,l.kt)("p",null,"Sets the current head of the local chain by block number\nNote, this is a destructive action and may severely damage your chain\nUse with extreme caution\nReferences -",">"," Ethash"),(0,l.kt)("h4",{id:"set_block_profile_rate"},"set","_","block","_","profile","_","rate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def set_block_profile_rate(rate: float) -> None\n")),(0,l.kt)("p",null,"Sets the rate (in samples/sec) of goroutine block profile data collection\nA non-zero rate enables block profiling, setting it to zero stops the profile\nCollected profile data can be written using debug_writeBlockProfile"),(0,l.kt)("h4",{id:"arguments-2"},"Arguments"),(0,l.kt)("p",null,"rate: The rate (in samplessec) of goroutine block profile data collection"),(0,l.kt)("h4",{id:"stacks"},"stacks"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def stacks() -> Any\n")),(0,l.kt)("p",null,"Returns a printed representation of the stacks of all goroutines\nNote that the web3 wrapper for this method takes care of the printing and does not return the string"),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,"printedStacks: A printed representation of the stacks of all goroutines"),(0,l.kt)("h4",{id:"start_c_p_u_profile"},"start","_","c","_","p","_","u","_","profile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def start_c_p_u_profile() -> None\n")),(0,l.kt)("p",null,"Turns on CPU profiling indefinitely, writing to the given file"),(0,l.kt)("h4",{id:"start_go_trace"},"start","_","go","_","trace"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def start_go_trace() -> None\n")),(0,l.kt)("p",null,"Starts writing a Go runtime trace to the given file"),(0,l.kt)("h4",{id:"stop_c_p_u_profile"},"stop","_","c","_","p","_","u","_","profile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def stop_c_p_u_profile() -> None\n")),(0,l.kt)("p",null,"Stops an ongoing CPU profile"),(0,l.kt)("h4",{id:"stop_go_trace"},"stop","_","go","_","trace"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def stop_go_trace() -> None\n")),(0,l.kt)("p",null,"Stops writing the Go runtime trace"),(0,l.kt)("h4",{id:"trace_block"},"trace","_","block"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def trace_block(block_name: str) -> TraceBlockResponseBlcok\n")),(0,l.kt)("p",null,"The traceBlock method will return a full stack trace of all invoked opcodes of all transaction that were included in this block\nNote, the parent of this block must be present or it will fail\nReferences -",">"," RLP"),(0,l.kt)("h4",{id:"arguments-3"},"Arguments"),(0,l.kt)("p",null,"blockName: The name of the traced block"),(0,l.kt)("h4",{id:"returns-traceblockresponseblcok"},"Returns ",(0,l.kt)("a",{parentName:"h4",href:"#traceblockresponseblcok-objects"},(0,l.kt)("inlineCode",{parentName:"a"},"TraceBlockResponseBlcok"))),(0,l.kt)("p",null,"blcok: The stack trace of transcation of the block"),(0,l.kt)("h4",{id:"trace_block_by_number"},"trace","_","block","_","by","_","number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def trace_block_by_number(block_num: str) -> Any\n")),(0,l.kt)("p",null,"Similar to debug_traceBlock,traceBlockByNumber accepts a block number and will replay the block that is already present in the database\nReferences -",">"," RLP"),(0,l.kt)("h4",{id:"arguments-4"},"Arguments"),(0,l.kt)("p",null,"blockNum: A block number of a traced block"),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,"block: Replaying the block that is already present in the database"),(0,l.kt)("h4",{id:"trace_block_by_hash"},"trace","_","block","_","by","_","hash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def trace_block_by_hash(block_hash: str) -> Any\n")),(0,l.kt)("p",null,"Similar to debug_traceBlock,traceBlockByHash accepts a block hash and will replay the block that is already present in the database\nReferences -",">"," RLP"),(0,l.kt)("h4",{id:"arguments-5"},"Arguments"),(0,l.kt)("p",null,"blockHash: A block hash of a traced block"),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,"block: Replaying the block that is already present in the database"),(0,l.kt)("h4",{id:"trace_block_from_file"},"trace","_","block","_","from","_","file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def trace_block_from_file(file: any) -> Any\n")),(0,l.kt)("p",null,"Similar to debug_traceBlock,traceBlockFromFile accepts a file containing the RLP of the block\nReferences -",">"," RLP"),(0,l.kt)("h4",{id:"arguments-6"},"Arguments"),(0,l.kt)("p",null,"file: A file containing the RLP of the block"),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,"block: Replaying the block that is already present in the database"),(0,l.kt)("h4",{id:"standard_trace_block_to_file"},"standard","_","trace","_","block","_","to","_","file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def standard_trace_block_to_file(block: str, tx_hash: optional[str],\n                                 disable_memory: optional[bool]) -> List[str]\n")),(0,l.kt)("p",null,"When JS-based tracing (see below) was first implemented, the intended usecase was to enable long-running tracers that could stream results back via a subscription channel\nThis method works a bit differently\n(For full details, see PR)\n-It streams output to disk during the execution, to not blow up the memory usage on the node -It uses jsonl as output format (to allow streaming) -Uses a cross-client standardized output, so called \u2018standard json","'"," ~Uses op for string-representation of opcode, instead of op/opName for numeric/string, and other simlar small differences\n~has refund ~Represents memory as a contiguous chunk of data, as opposed to a list of 32 byte segments like debug_traceTransaction\nThis means that this method is only \u2018useful\u2019 for callers who control the node \u2013 at least sufficiently to be able to read the artefacts from the filesystem after the fact"),(0,l.kt)("h4",{id:"arguments-7"},"Arguments"),(0,l.kt)("p",null,"block: The block\ntxHash: txHash\ndisableMemory: disableMemory"),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,"output: output\n","'","The method can be used to dump a certain transaction out of a given block ",">"," debug.standardTraceBlockToFile(",'"',"0x0bbe9f1484668a2bf159c63f0cf556ed8c8282f99e3ffdb03ad2175a863bca63",'"',", {txHash:",'"',"0x4049f61ffbb0747bb88dc1c85dd6686ebf225a3c10c282c45a8e0c644739f7e9",'"',", disableMemory:true}) ",'["',"tmp/block_0x0bbe9f14-14-0x4049f61f-099048234",'"]',"\nOr all txs from a block ",">"," debug.standardTraceBlockToFile(",'"',"0x0bbe9f1484668a2bf159c63f0cf556ed8c8282f99e3ffdb03ad2175a863bca63",'"',", {disableMemory:true}) ",'["',"/tmp/block_0x0bbe9f14-0-0xb4502ea7-409046657",'"',", ",'"',"/tmp/block_0x0bbe9f14-1-0xe839be8f-954614764",'"',",...]","\nFiles are created in a temp-location, with the naming standard block_","<","blockhash:4",">","-","<","txindex",">","-","<","txhash:4",">","-","<","random suffix",">",". Each opcode immediately streams to file, with no in-Getd buffering aside from whatever buffering the os normally does.\nOn the server side, it also adds some more info when regenerating historical state, namely, the reexec-number if required historical state is not avaiable is encountered, so a user can experiment with increasing that setting. It also prints out the remaining block until it reaches target\nThe options is as follows type StdTraceConfig struct { ",(0,l.kt)("em",{parentName:"p"},"vm.LogConfig Reexec "),"uint64 TxHash *common.Hash } ","'"),(0,l.kt)("h4",{id:"standard_trace_bad_block_to_file"},"standard","_","trace","_","bad","_","block","_","to","_","file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def standard_trace_bad_block_to_file() -> None\n")),(0,l.kt)("p",null,"This method is similar to debug_standardTraceBlockToFile, but can be used to obtain info about a block which has been rejected as invalid (for some reason)"),(0,l.kt)("h4",{id:"trace_transaction"},"trace","_","transaction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def trace_transaction(\n        hash: str, disable_storage: optional[bool],\n        disable_memory: optional[bool], disable_stack: optional[bool],\n        tracer: optional[str],\n        timeout: optional[str]) -> TraceTransactionResponseTransaction\n")),(0,l.kt)("p",null,"OBS In most scenarios, debug\nstandardTraceBlockToFile is better suited for tracing! The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network\nIt will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash"),(0,l.kt)("p",null,"In addition to the hash of the transaction you may give it a secondary optional argument, which specifies the options for this specific call\nThe possible options are\ndisableStorage: BOOL\nSetting this to true will disable storage capture (default = false)\ndisableMemory:  BOOL\nSetting this to true will disable memory capture (default = false)\ndisableStack:   BOOL\nSetting this to true will disable stack capture (default = false)\ntracer:         STRING\nSetting this will enable JavaScript-based transaction tracing, described below\nIf set, the previous four arguments will be ignored\ntimeout:        STRING\nOverrides the default timeout of 5 seconds for JavaScript-based tracing calls\nValid values are described here"),(0,l.kt)("h4",{id:"arguments-8"},"Arguments"),(0,l.kt)("p",null,"hash: The hash of the transaction\ndisableStorage: Setting this to true will disable storage capture (default = false).\ndisableMemory: Setting this to true will disable memory capture (default = false).\ndisableStack: Setting this to true will disable stack capture (default = false).\ntracer: Setting this will enable JavaScript-based transaction tracing, described below. If set, the previous four arguments will be ignored.\ntimeout: Overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Valid values are described here."),(0,l.kt)("h4",{id:"returns-tracetransactionresponsetransaction"},"Returns ",(0,l.kt)("a",{parentName:"h4",href:"#tracetransactionresponsetransaction-objects"},(0,l.kt)("inlineCode",{parentName:"a"},"TraceTransactionResponseTransaction"))),(0,l.kt)("p",null,"transaction: The stack trace of transcation of the block"),(0,l.kt)("h4",{id:"java_script_based_tracing"},"java","_","script","_","based","_","tracing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def java_script_based_tracing() -> None\n")),(0,l.kt)("p",null,"Javascript"),(0,l.kt)("h4",{id:"trace_call"},"trace","_","call"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def trace_call(to: str, from_field: optional[str], gas: optional[str],\n               gas_price: optional[float], value: optional[float],\n               data: optional[str]) -> Any\n")),(0,l.kt)("p",null,"The debug_traceCall method lets you run an eth_call on top of a given block\nThe block can be specified either by hash or by number\nIt takes the same input object as a eth_call\nIt returns the same output as debug_traceTransaction\nA tracer can be specified as a third argument, similar to debug_traceTransaction"),(0,l.kt)("p",null,"Object - The transaction call object\nfrom:     DATA, 20 Bytes - (optional) The address the transaction is sent from\nto:       DATA, 20 Bytes -            The address the transaction is directed to\ngas:      QUANTITY       - (optional) Integer of the gas provided for the transaction execution\neth_call consumes zero gas, but this parameter may be needed by some executions\ngasPrice: QUANTITY       - (optional) Integer of the gasPrice used for each paid gas value:    QUANTITY       - (optional) Integer of the value sent with this transaction data:     DATA           - (optional) Hash of the method signature and encoded parameters\nFor details see Ethereum Contract ABI in the Solidity documentation"),(0,l.kt)("h4",{id:"arguments-9"},"Arguments"),(0,l.kt)("p",null,"to: The address the transaction is directed to.\nfrom: The address the transaction is sent from.\ngas: Integer of the gasPrice used for each paid gas\ngasPrice: Integer of the gasPrice used for each paid gas\nvalue: Integer of the value sent with this transaction\ndata: Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI in the Solidity documentation"),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,"transaction: Same output as debug_traceTransaction"),(0,l.kt)("h4",{id:"verbosity"},"verbosity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def verbosity() -> Any\n")),(0,l.kt)("p",null,"Sets the logging verbosity ceiling\nLog messages with level up to and including the given level will be printed\nThe verbosity of individual packages and source files can be raised using debug_vmodule"),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,"message: Log messages with level up to and including the given level will be printed."),(0,l.kt)("h4",{id:"vmodule"},"vmodule"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def vmodule(message_restrictions: str) -> str\n")),(0,l.kt)("p",null,"Sets the logging verbosity pattern"),(0,l.kt)("h4",{id:"arguments-10"},"Arguments"),(0,l.kt)("p",null,"messageRestrictions: If you want to see messages from a particular Go package (directory) and all subdirectories, use:    ",'"',"etd*=6",'"'," If you want to restrict messages to a particular package (e.g. p2p) but exclude subdirectories, use: ",'"',"p2p=6",'"'," If you want to see log messages from a particular source file, use:                                  ",'"',"server.go=6",'"'," You can compose these basic patterns. If you want to see all output from peer.go in a package below etd (etd/peer.go, etd/downloader/peer.go) as well as output from package p2p at level ","<"," = 5, use:    ",'"',"etd peer.go=6,p2p=5",'"'),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,"message:"),(0,l.kt)("h4",{id:"write_block_profile"},"write","_","block","_","profile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_block_profile() -> None\n")),(0,l.kt)("p",null,"Writes a goroutine blocking profile to the given file"),(0,l.kt)("h4",{id:"write_mem_profile"},"write","_","mem","_","profile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def write_mem_profile() -> None\n")),(0,l.kt)("p",null,"Writes an allocation profile to the given file\nNote that the profiling rate cannot be set through the API, it must be set on the command line using the --pprof\nmemprofilerate flag"))}p.isMDXComponent=!0}}]);